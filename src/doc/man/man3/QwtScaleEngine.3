.TH "QwtScaleEngine" 3 "24 May 2008" "Version 5.1.1" "Qwt User's Guide" \" -*- nroff -*-
.ad l
.nh
.SH NAME
QwtScaleEngine \- 
.SH SYNOPSIS
.br
.PP
Inherited by \fBQwtLinearScaleEngine\fP, and \fBQwtLog10ScaleEngine\fP.
.PP
.SH "Detailed Description"
.PP 
Base class for scale engines. 

A scale engine trys to find 'reasonable' ranges and step sizes for scales.
.PP
The layout of the scale can be varied with \fBsetAttribute()\fP.
.PP
Qwt offers implementations for logarithmic (log10) and linear scales. Contributions for other types of scale engines (date/time, log2 ... ) are welcome. 
.PP
Definition at line 50 of file qwt_scale_engine.h.
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBAttribute\fP { \fBNoAttribute\fP =  0, \fBIncludeReference\fP =  1, \fBSymmetric\fP =  2, \fBFloating\fP =  4, \fBInverted\fP =  8 }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBQwtScaleEngine\fP ()"
.br
.ti -1c
.RI "virtual \fB~QwtScaleEngine\fP ()"
.br
.ti -1c
.RI "void \fBsetAttribute\fP (\fBAttribute\fP, bool on=true)"
.br
.ti -1c
.RI "bool \fBtestAttribute\fP (\fBAttribute\fP) const"
.br
.ti -1c
.RI "void \fBsetAttributes\fP (int)"
.br
.ti -1c
.RI "int \fBattributes\fP () const"
.br
.ti -1c
.RI "void \fBsetReference\fP (double reference)"
.br
.ti -1c
.RI "double \fBreference\fP () const"
.br
.ti -1c
.RI "void \fBsetMargins\fP (double m1, double m2)"
.br
.ti -1c
.RI "double \fBloMargin\fP () const"
.br
.ti -1c
.RI "double \fBhiMargin\fP () const"
.br
.ti -1c
.RI "virtual void \fBautoScale\fP (int maxNumSteps, double &x1, double &x2, double &stepSize) const =0"
.br
.ti -1c
.RI "virtual \fBQwtScaleDiv\fP \fBdivideScale\fP (double x1, double x2, int maxMajSteps, int maxMinSteps, double stepSize=0.0) const=0"
.br
.ti -1c
.RI "virtual \fBQwtScaleTransformation\fP * \fBtransformation\fP () const=0"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "bool \fBcontains\fP (const \fBQwtDoubleInterval\fP &, double val) const"
.br
.ti -1c
.RI "QwtValueList \fBstrip\fP (const QwtValueList &, const \fBQwtDoubleInterval\fP &) const"
.br
.ti -1c
.RI "double \fBdivideInterval\fP (double interval, int numSteps) const "
.br
.ti -1c
.RI "\fBQwtDoubleInterval\fP \fBbuildInterval\fP (double v) const"
.br
.in -1c
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBQwtScaleEngine::Attribute\fP"
.PP
see \fBQwtScaleEngine::setAttribute\fP, testAttribute 
.PP
Definition at line 54 of file qwt_scale_engine.h.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "QwtScaleEngine::QwtScaleEngine ()\fC [explicit]\fP"
.PP
Ctor. 
.PP
Definition at line 169 of file qwt_scale_engine.cpp.
.SS "QwtScaleEngine::~QwtScaleEngine ()\fC [virtual]\fP"
.PP
Dtor. 
.PP
Definition at line 176 of file qwt_scale_engine.cpp.
.SH "Member Function Documentation"
.PP 
.SS "void QwtScaleEngine::setAttribute (\fBAttribute\fP attribute, bool on = \fCtrue\fP)"
.PP
Change a scale attribute
.PP
\fBParameters:\fP
.RS 4
\fIattribute\fP Attribute to change 
.br
\fIon\fP On/Off
.RE
.PP
The behaviour of the scale engine can be changed with the following attributes: 
.IP "\fBQwtScaleEngine::IncludeReference \fP" 1c
Build a scale which includes the reference value. 
.IP "\fBQwtScaleEngine::Symmetric \fP" 1c
Build a scale which is symmetric to the reference value. 
.IP "\fBQwtScaleEngine::Floating \fP" 1c
The endpoints of the scale are supposed to be equal the outmost included values plus the specified margins (see \fBsetMargins()\fP). If this attribute is not* set, the endpoints of the scale will be integer multiples of the step size. 
.IP "\fBQwtScaleEngine::Inverted \fP" 1c
Turn the scale upside down. 
.PP
.PP
\fBSee also:\fP
.RS 4
\fBQwtScaleEngine::testAttribute()\fP 
.RE
.PP

.PP
Definition at line 339 of file qwt_scale_engine.cpp.
.SS "bool QwtScaleEngine::testAttribute (\fBAttribute\fP attribute) const"
.PP
Check if a attribute is set.
.PP
\fBParameters:\fP
.RS 4
\fIattribute\fP Attribute to be tested 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBQwtScaleEngine::setAttribute()\fP for a description of the possible options. 
.RE
.PP

.PP
Definition at line 353 of file qwt_scale_engine.cpp.
.PP
Referenced by QwtLog10ScaleEngine::autoScale(), and QwtLinearScaleEngine::autoScale().
.SS "void QwtScaleEngine::setAttributes (int attributes)"
.PP
Change the scale attribute
.PP
\fBParameters:\fP
.RS 4
\fIattributes\fP Set scale attributes 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBQwtScaleEngine::attributes()\fP 
.RE
.PP

.PP
Definition at line 364 of file qwt_scale_engine.cpp.
.PP
Referenced by QwtLog10ScaleEngine::divideScale().
.SS "int QwtScaleEngine::attributes () const"
.PP
Return the scale attributes 
.PP
Definition at line 372 of file qwt_scale_engine.cpp.
.PP
Referenced by QwtLog10ScaleEngine::divideScale().
.SS "void QwtScaleEngine::setReference (double r)"
.PP
Specify a reference point. 
.PP
\fBParameters:\fP
.RS 4
\fIr\fP new reference value
.RE
.PP
The reference point is needed if options IncludeRef or Symmetric are active. Its default value is 0.0. 
.PP
Definition at line 384 of file qwt_scale_engine.cpp.
.PP
Referenced by QwtLog10ScaleEngine::divideScale().
.SS "double QwtScaleEngine::reference () const"
.PP
\fBReturns:\fP
.RS 4
the reference value 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBQwtScaleEngine::setReference()\fP, QwtScaleEngine::setOptions() 
.RE
.PP

.PP
Definition at line 393 of file qwt_scale_engine.cpp.
.PP
Referenced by QwtLog10ScaleEngine::autoScale(), QwtLinearScaleEngine::autoScale(), and QwtLog10ScaleEngine::divideScale().
.SS "void QwtScaleEngine::setMargins (double mlo, double mhi)"
.PP
Specify margins at the scale's endpoints. 
.PP
\fBParameters:\fP
.RS 4
\fImlo\fP minimum distance between the scale's lower boundary and the smallest enclosed value 
.br
\fImhi\fP minimum distance between the scale's upper boundary and the greatest enclosed value
.RE
.PP
Margins can be used to leave a minimum amount of space between the enclosed intervals and the boundaries of the scale.
.PP
\fBWarning:\fP
.RS 4
.PD 0
.IP "\(bu" 2
\fBQwtLog10ScaleEngine\fP measures the margins in decades.
.PP
.RE
.PP
\fBSee also:\fP
.RS 4
\fBQwtScaleEngine::hiMargin\fP, \fBQwtScaleEngine::loMargin\fP 
.RE
.PP

.PP
Definition at line 219 of file qwt_scale_engine.cpp.
.PP
Referenced by QwtLog10ScaleEngine::divideScale().
.SS "double QwtScaleEngine::loMargin () const"
.PP
\fBReturns:\fP
.RS 4
the margin at the lower end of the scale The default margin is 0.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBQwtScaleEngine::setMargins()\fP 
.RE
.PP

.PP
Definition at line 187 of file qwt_scale_engine.cpp.
.PP
Referenced by QwtLog10ScaleEngine::autoScale(), QwtLinearScaleEngine::autoScale(), and QwtLog10ScaleEngine::divideScale().
.SS "double QwtScaleEngine::hiMargin () const"
.PP
\fBReturns:\fP
.RS 4
the margin at the upper end of the scale The default margin is 0.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBQwtScaleEngine::setMargins()\fP 
.RE
.PP

.PP
Definition at line 198 of file qwt_scale_engine.cpp.
.PP
Referenced by QwtLog10ScaleEngine::autoScale(), QwtLinearScaleEngine::autoScale(), and QwtLog10ScaleEngine::divideScale().
.SS "virtual void QwtScaleEngine::autoScale (int maxNumSteps, double & x1, double & x2, double & stepSize) const\fC [pure virtual]\fP"
.PP
Align and divide an interval
.PP
\fBParameters:\fP
.RS 4
\fImaxNumSteps\fP Max. number of steps 
.br
\fIx1\fP First limit of the interval (In/Out) 
.br
\fIx2\fP Second limit of the interval (In/Out) 
.br
\fIstepSize\fP Step size (Return value) 
.RE
.PP

.PP
Implemented in \fBQwtLinearScaleEngine\fP, and \fBQwtLog10ScaleEngine\fP.
.SS "virtual \fBQwtScaleDiv\fP QwtScaleEngine::divideScale (double x1, double x2, int maxMajSteps, int maxMinSteps, double stepSize = \fC0.0\fP) const\fC [pure virtual]\fP"
.PP
Calculate a scale division. 
.PP
\fBParameters:\fP
.RS 4
\fIx1\fP First interval limit 
.br
\fIx2\fP Second interval limit 
.br
\fImaxMajSteps\fP Maximum for the number of major steps 
.br
\fImaxMinSteps\fP Maximum number of minor steps 
.br
\fIstepSize\fP Step size. If stepSize == 0.0, the scaleEngine calculates one. 
.RE
.PP

.PP
Implemented in \fBQwtLinearScaleEngine\fP, and \fBQwtLog10ScaleEngine\fP.
.SS "virtual \fBQwtScaleTransformation\fP* QwtScaleEngine::transformation () const\fC [pure virtual]\fP"
.PP
\fBReturns:\fP
.RS 4
a transformation 
.RE
.PP

.PP
Implemented in \fBQwtLinearScaleEngine\fP, and \fBQwtLog10ScaleEngine\fP.
.SS "bool QwtScaleEngine::contains (const \fBQwtDoubleInterval\fP & interval, double value) const\fC [protected]\fP"
.PP
Check if an interval 'contains' a value
.PP
\fBParameters:\fP
.RS 4
\fIinterval\fP Interval 
.br
\fIvalue\fP Value
.RE
.PP
\fBSee also:\fP
.RS 4
\fBQwtScaleArithmetic::compareEps\fP 
.RE
.PP

.PP
Definition at line 251 of file qwt_scale_engine.cpp.
.PP
References QwtScaleArithmetic::compareEps(), QwtDoubleInterval::isValid(), QwtDoubleInterval::maxValue(), QwtDoubleInterval::minValue(), and QwtDoubleInterval::width().
.PP
Referenced by strip().
.SS "QwtValueList QwtScaleEngine::strip (const QwtValueList & ticks, const \fBQwtDoubleInterval\fP & interval) const\fC [protected]\fP"
.PP
Remove ticks from a list, that are not inside an interval
.PP
\fBParameters:\fP
.RS 4
\fIticks\fP Tick list 
.br
\fIinterval\fP Interval
.RE
.PP
\fBReturns:\fP
.RS 4
Stripped tick list 
.RE
.PP

.PP
Definition at line 280 of file qwt_scale_engine.cpp.
.PP
References contains(), and QwtDoubleInterval::isValid().
.SS "double QwtScaleEngine::divideInterval (double intervalSize, int numSteps) const\fC [protected]\fP"
.PP
Calculate a step size for an interval size
.PP
\fBParameters:\fP
.RS 4
\fIintervalSize\fP Interval size 
.br
\fInumSteps\fP Number of steps
.RE
.PP
\fBReturns:\fP
.RS 4
Step size 
.RE
.PP

.PP
Definition at line 233 of file qwt_scale_engine.cpp.
.PP
References QwtScaleArithmetic::ceil125(), and QwtScaleArithmetic::divideEps().
.PP
Referenced by QwtLog10ScaleEngine::autoScale(), QwtLinearScaleEngine::autoScale(), QwtLog10ScaleEngine::divideScale(), and QwtLinearScaleEngine::divideScale().
.SS "\fBQwtDoubleInterval\fP QwtScaleEngine::buildInterval (double v) const\fC [protected]\fP"
.PP
Build an interval for a value. 
.PP
In case of v == 0.0 the interval is [-0.5, 0.5], otherwide it is [0.5 * v, 1.5 * v] 
.PP
Definition at line 309 of file qwt_scale_engine.cpp.
.PP
Referenced by QwtLog10ScaleEngine::autoScale(), and QwtLinearScaleEngine::autoScale().

.SH "Author"
.PP 
Generated automatically by Doxygen for Qwt User's Guide from the source code.
