.TH "QwtText" 3 "24 May 2008" "Version 5.1.1" "Qwt User's Guide" \" -*- nroff -*-
.ad l
.nh
.SH NAME
QwtText \- 
.SH SYNOPSIS
.br
.PP
.SH "Detailed Description"
.PP 
A class representing a text. 

A \fBQwtText\fP is a text including a set of attributes how to render it.
.PP
.IP "\(bu" 2
Format
.br
 A text might include control sequences (f.e tags) describing how to render it. Each format (f.e MathML, TeX, Qt Rich Text) has its own set of control sequences, that can be handles by a \fBQwtTextEngine\fP for this format.
.IP "\(bu" 2
Background
.br
 A text might have a background, defined by a QPen and QBrush to improve its visibility.
.IP "\(bu" 2
Font
.br
 A text might have an individual font.
.IP "\(bu" 2
Color
.br
 A text might have an individual color.
.IP "\(bu" 2
Render Flags
.br
 Flags from Qt::AlignmentFlag and Qt::TextFlag used like in QPainter::drawText.
.PP
.PP
\fBSee also:\fP
.RS 4
\fBQwtTextEngine\fP, \fBQwtTextLabel\fP 
.RE
.PP

.PP
Definition at line 51 of file qwt_text.h.
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBTextFormat\fP { \fBAutoText\fP =  0, \fBPlainText\fP, \fBRichText\fP, \fBMathMLText\fP, \fBTeXText\fP, \fBOtherFormat\fP =  100 }"
.br
.ti -1c
.RI "enum \fBPaintAttribute\fP { \fBPaintCached\fP =  1, \fBPaintPacked\fP =  2, \fBPaintFiltered\fP =  1, \fBClipPolygons\fP =  2, \fBPaintUsingTextFont\fP =  1, \fBPaintUsingTextColor\fP =  2, \fBPaintBackground\fP =  4 }"
.br
.ti -1c
.RI "enum \fBLayoutAttribute\fP { \fBMinimumLayout\fP =  1 }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBQwtText\fP (const QString &=QString::null, \fBTextFormat\fP textFormat=AutoText)"
.br
.ti -1c
.RI "\fBQwtText\fP (const \fBQwtText\fP &)"
.br
.ti -1c
.RI "\fB~QwtText\fP ()"
.br
.ti -1c
.RI "\fBQwtText\fP & \fBoperator=\fP (const \fBQwtText\fP &)"
.br
.ti -1c
.RI "int \fBoperator==\fP (const \fBQwtText\fP &) const"
.br
.ti -1c
.RI "int \fBoperator!=\fP (const \fBQwtText\fP &) const"
.br
.ti -1c
.RI "void \fBsetText\fP (const QString &, \fBQwtText::TextFormat\fP textFormat=AutoText)"
.br
.ti -1c
.RI "QString \fBtext\fP () const"
.br
.ti -1c
.RI "bool \fBisNull\fP () const"
.br
.ti -1c
.RI "bool \fBisEmpty\fP () const"
.br
.ti -1c
.RI "void \fBsetFont\fP (const QFont &)"
.br
.ti -1c
.RI "QFont \fBfont\fP () const"
.br
.ti -1c
.RI "QFont \fBusedFont\fP (const QFont &) const "
.br
.ti -1c
.RI "void \fBsetRenderFlags\fP (int flags)"
.br
.ti -1c
.RI "int \fBrenderFlags\fP () const"
.br
.ti -1c
.RI "void \fBsetColor\fP (const QColor &)"
.br
.ti -1c
.RI "QColor \fBcolor\fP () const"
.br
.ti -1c
.RI "QColor \fBusedColor\fP (const QColor &) const"
.br
.ti -1c
.RI "void \fBsetBackgroundPen\fP (const QPen &)"
.br
.ti -1c
.RI "QPen \fBbackgroundPen\fP () const"
.br
.ti -1c
.RI "void \fBsetBackgroundBrush\fP (const QBrush &)"
.br
.ti -1c
.RI "QBrush \fBbackgroundBrush\fP () const"
.br
.ti -1c
.RI "void \fBsetPaintAttribute\fP (\fBPaintAttribute\fP, bool on=true)"
.br
.ti -1c
.RI "bool \fBtestPaintAttribute\fP (\fBPaintAttribute\fP) const"
.br
.ti -1c
.RI "void \fBsetLayoutAttribute\fP (\fBLayoutAttribute\fP, bool on=true)"
.br
.ti -1c
.RI "bool \fBtestLayoutAttribute\fP (\fBLayoutAttribute\fP) const"
.br
.ti -1c
.RI "int \fBheightForWidth\fP (int width, const QFont &=QFont()) const"
.br
.ti -1c
.RI "QSize \fBtextSize\fP (const QFont &=QFont()) const"
.br
.ti -1c
.RI "void \fBdraw\fP (QPainter *painter, const QRect &rect) const"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static const \fBQwtTextEngine\fP * \fBtextEngine\fP (const QString &text, \fBQwtText::TextFormat\fP=AutoText)"
.br
.ti -1c
.RI "static const \fBQwtTextEngine\fP * \fBtextEngine\fP (\fBQwtText::TextFormat\fP)"
.br
.ti -1c
.RI "static void \fBsetTextEngine\fP (\fBQwtText::TextFormat\fP, \fBQwtTextEngine\fP *)"
.br
.in -1c
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBQwtText::TextFormat\fP"
.PP
Text format. 
.PP
The text format defines the \fBQwtTextEngine\fP, that is used to render the text.
.PP
.IP "\(bu" 2
AutoText
.br
 The text format is determined using \fBQwtTextEngine::mightRender\fP for all available text engines in increasing order > PlainText. If none of the text engines can render the text is rendered like PlainText.
.IP "\(bu" 2
PlainText
.br
 Draw the text as it is, using a \fBQwtPlainTextEngine\fP.
.IP "\(bu" 2
RichText
.br
 Use the Scribe framework (Qt Rich Text) to render the text.
.IP "\(bu" 2
MathMLText
.br
 Use a MathML (http://en.wikipedia.org/wiki/MathML) render engine to display the text. The Qwt MathML extension offers such an engine based on the MathML renderer of the Qt solutions package. Unfortunately it is only available for owners of a commercial Qt license.
.IP "\(bu" 2
TeXText
.br
 Use a TeX (http://en.wikipedia.org/wiki/TeX) render engine to display the text.
.IP "\(bu" 2
OtherFormat
.br
 The number of text formats can be extended using setTextEngine. Formats >= OtherFormat are not used by Qwt.
.PP
.PP
\fBSee also:\fP
.RS 4
\fBQwtTextEngine\fP, \fBsetTextEngine\fP 
.RE
.PP

.PP
Definition at line 85 of file qwt_text.h.
.SS "enum \fBQwtText::PaintAttribute\fP"
.PP
Paint Attributes. 
.PP
Font and color and background are optional attributes of a \fBQwtText\fP. The paint attributes hold the information, if they are set.
.PP
.IP "\(bu" 2
PaintUsingTextFont
.br
 The text has an individual font.
.IP "\(bu" 2
PaintUsingTextColor
.br
 The text has an individual color.
.IP "\(bu" 2
PaintBackground
.br
 The text has an individual background. 
.PP

.PP
Definition at line 111 of file qwt_text.h.
.SS "enum \fBQwtText::LayoutAttribute\fP"
.PP
Layout Attributes. 
.PP
The layout attributes affects some aspects of the layout of the text.
.PP
.IP "\(bu" 2
MinimumLayout
.br
 Layout the text without its margins. This mode is useful if a text needs to be aligned accurately, like the tick labels of a scale. If \fBQwtTextEngine::textMargins\fP is not implemented for the format of the text, MinimumLayout has no effect. 
.PP

.PP
Definition at line 129 of file qwt_text.h.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "QwtText::QwtText (const QString & text = \fCQString::null\fP, \fBQwtText::TextFormat\fP textFormat = \fCAutoText\fP)"
.PP
Constructor
.PP
\fBParameters:\fP
.RS 4
\fItext\fP Text content 
.br
\fItextFormat\fP Text format 
.RE
.PP

.PP
Definition at line 180 of file qwt_text.cpp.
.PP
References textEngine().
.SS "QwtText::QwtText (const \fBQwtText\fP &)"
.PP
Copy constructor. 
.PP
Definition at line 190 of file qwt_text.cpp.
.PP
References d_data, and d_layoutCache.
.SS "QwtText::~QwtText ()"
.PP
Destructor. 
.PP
Definition at line 200 of file qwt_text.cpp.
.SH "Member Function Documentation"
.PP 
.SS "\fBQwtText\fP & QwtText::operator= (const \fBQwtText\fP &)"
.PP
Assignement operator. 
.PP
Definition at line 207 of file qwt_text.cpp.
.PP
References d_data, and d_layoutCache.
.SS "void QwtText::setText (const QString & text, \fBQwtText::TextFormat\fP textFormat = \fCAutoText\fP)"
.PP
Assign a new text content
.PP
\fBParameters:\fP
.RS 4
\fItext\fP Text content 
.br
\fItextFormat\fP Text format 
.RE
.PP

.PP
Definition at line 237 of file qwt_text.cpp.
.PP
References textEngine().
.SS "QString QwtText::text () const"
.PP
Return the text. 
.PP
\fBSee also:\fP
.RS 4
\fBsetText\fP 
.RE
.PP

.PP
Definition at line 249 of file qwt_text.cpp.
.PP
Referenced by QwtPlot::grabProperties().
.SS "bool QwtText::isNull () const\fC [inline]\fP"
.PP
\fBReturns:\fP
.RS 4
\fBtext()\fP.\fBisNull()\fP 
.RE
.PP

.PP
Definition at line 149 of file qwt_text.h.
.SS "bool QwtText::isEmpty () const\fC [inline]\fP"
.PP
\fBReturns:\fP
.RS 4
\fBtext()\fP.\fBisEmpty()\fP 
.RE
.PP

.PP
Definition at line 152 of file qwt_text.h.
.PP
Referenced by QwtScaleDraw::boundingLabelRect(), QwtScaleDraw::drawLabel(), QwtRoundScaleDraw::drawLabel(), QwtPicker::drawTracker(), QwtRoundScaleDraw::extent(), QwtScaleDraw::labelRect(), and QwtPicker::trackerRect().
.SS "void QwtText::setFont (const QFont & font)"
.PP
Set the font.
.PP
\fBParameters:\fP
.RS 4
\fIfont\fP Font 
.RE
.PP
\fBNote:\fP
.RS 4
Setting the font might have no effect, when the text contains control sequences for setting fonts. 
.RE
.PP

.PP
Definition at line 289 of file qwt_text.cpp.
.PP
References setPaintAttribute().
.PP
Referenced by QwtPlotPrintFilter::apply(), and QwtPicker::drawTracker().
.SS "QFont QwtText::font () const"
.PP
Return the font. 
.PP
Definition at line 296 of file qwt_text.cpp.
.PP
Referenced by QwtPlotPrintFilter::apply(), draw(), heightForWidth(), and textSize().
.SS "QFont QwtText::usedFont (const QFont & defaultFont) const"
.PP
Return the font of the text, if it has one. Otherwise return defaultFont.
.PP
\fBParameters:\fP
.RS 4
\fIdefaultFont\fP Default font 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBsetFont\fP, \fBfont\fP, PaintAttributes 
.RE
.PP

.PP
Definition at line 308 of file qwt_text.cpp.
.PP
Referenced by QwtPicker::drawTracker(), heightForWidth(), and textSize().
.SS "void QwtText::setRenderFlags (int renderFlags)"
.PP
Change the render flags. 
.PP
The default setting is Qt::AlignCenter
.PP
\fBParameters:\fP
.RS 4
\fIrenderFlags\fP Bitwise OR of the flags used like in QPainter::drawText
.RE
.PP
\fBSee also:\fP
.RS 4
\fBrenderFlags\fP, \fBQwtTextEngine::draw\fP 
.RE
.PP
\fBNote:\fP
.RS 4
Some renderFlags might have no effect, depending on the text format. 
.RE
.PP

.PP
Definition at line 264 of file qwt_text.cpp.
.PP
Referenced by QwtScaleWidget::drawTitle(), QwtLegendItem::setText(), QwtScaleWidget::setTitle(), and QwtAbstractScaleDraw::tickLabel().
.SS "int QwtText::renderFlags () const"
.PP
\fBReturns:\fP
.RS 4
Render flags 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBsetRenderFlags\fP 
.RE
.PP

.PP
Definition at line 277 of file qwt_text.cpp.
.PP
Referenced by QwtScaleWidget::setTitle().
.SS "void QwtText::setColor (const QColor & color)"
.PP
Set the pen color used for painting the text.
.PP
\fBParameters:\fP
.RS 4
\fIcolor\fP Color 
.RE
.PP
\fBNote:\fP
.RS 4
Setting the color might have no effect, when the text contains control sequences for setting colors. 
.RE
.PP

.PP
Definition at line 323 of file qwt_text.cpp.
.PP
References setPaintAttribute().
.PP
Referenced by QwtPlotPrintFilter::apply(), and QwtPlotPrintFilter::reset().
.SS "QColor QwtText::color () const"
.PP
Return the pen color, used for painting the text. 
.PP
Definition at line 330 of file qwt_text.cpp.
.PP
Referenced by QwtPlotPrintFilter::apply().
.SS "QColor QwtText::usedColor (const QColor & defaultColor) const"
.PP
Return the color of the text, if it has one. Otherwise return defaultColor.
.PP
\fBParameters:\fP
.RS 4
\fIdefaultColor\fP Default color 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBsetColor\fP, \fBcolor\fP, PaintAttributes 
.RE
.PP

.PP
Definition at line 342 of file qwt_text.cpp.
.SS "void QwtText::setBackgroundPen (const QPen & pen)"
.PP
Set the background pen
.PP
\fBParameters:\fP
.RS 4
\fIpen\fP Background pen 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBbackgroundPen\fP, \fBsetBackgroundBrush\fP 
.RE
.PP

.PP
Definition at line 356 of file qwt_text.cpp.
.PP
References setPaintAttribute().
.SS "QPen QwtText::backgroundPen () const"
.PP
\fBReturns:\fP
.RS 4
Background pen 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBsetBackgroundPen\fP, \fBbackgroundBrush\fP 
.RE
.PP

.PP
Definition at line 366 of file qwt_text.cpp.
.SS "void QwtText::setBackgroundBrush (const QBrush & brush)"
.PP
Set the background brush
.PP
\fBParameters:\fP
.RS 4
\fIbrush\fP Background brush 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBbackgroundBrush\fP, \fBsetBackgroundPen\fP 
.RE
.PP

.PP
Definition at line 377 of file qwt_text.cpp.
.PP
References setPaintAttribute().
.SS "QBrush QwtText::backgroundBrush () const"
.PP
\fBReturns:\fP
.RS 4
Background brush 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBsetBackgroundBrush\fP, \fBbackgroundPen\fP 
.RE
.PP

.PP
Definition at line 387 of file qwt_text.cpp.
.SS "void QwtText::setPaintAttribute (\fBPaintAttribute\fP attribute, bool on = \fCtrue\fP)"
.PP
Change a paint attribute
.PP
\fBParameters:\fP
.RS 4
\fIattribute\fP Paint attribute 
.br
\fIon\fP On/Off
.RE
.PP
\fBNote:\fP
.RS 4
Used by setFont, setColor, setBackgroundPen and setBackgroundBrush 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBtestPaintAttribute\fP 
.RE
.PP

.PP
Definition at line 401 of file qwt_text.cpp.
.PP
Referenced by setBackgroundBrush(), setBackgroundPen(), setColor(), and setFont().
.SS "bool QwtText::testPaintAttribute (\fBPaintAttribute\fP attribute) const"
.PP
Test a paint attribute
.PP
\fBParameters:\fP
.RS 4
\fIattribute\fP Paint attribute 
.RE
.PP
\fBReturns:\fP
.RS 4
true, if attribute is enabled
.RE
.PP
\fBSee also:\fP
.RS 4
\fBsetPaintAttribute\fP 
.RE
.PP

.PP
Definition at line 417 of file qwt_text.cpp.
.PP
Referenced by QwtPlotPrintFilter::apply().
.SS "void QwtText::setLayoutAttribute (\fBLayoutAttribute\fP attribute, bool on = \fCtrue\fP)"
.PP
Change a layout attribute
.PP
\fBParameters:\fP
.RS 4
\fIattribute\fP Layout attribute 
.br
\fIon\fP On/Off 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBtestLayoutAttribute\fP 
.RE
.PP

.PP
Definition at line 429 of file qwt_text.cpp.
.SS "bool QwtText::testLayoutAttribute (\fBLayoutAttribute\fP attribute) const"
.PP
Test a layout attribute
.PP
\fBParameters:\fP
.RS 4
\fIattribute\fP Layout attribute 
.RE
.PP
\fBReturns:\fP
.RS 4
true, if attribute is enabled
.RE
.PP
\fBSee also:\fP
.RS 4
\fBsetLayoutAttribute\fP 
.RE
.PP

.PP
Definition at line 445 of file qwt_text.cpp.
.SS "int QwtText::heightForWidth (int width, const QFont & defaultFont = \fCQFont()\fP) const"
.PP
Find the height for a given width
.PP
\fBParameters:\fP
.RS 4
\fIdefaultFont\fP Font, used for the calculation if the text has no font 
.br
\fIwidth\fP Width
.RE
.PP
\fBReturns:\fP
.RS 4
Calculated height 
.RE
.PP

.PP
Definition at line 458 of file qwt_text.cpp.
.PP
References font(), QwtMetricsMap::layoutToScreenX(), QwtPainter::metricsMap(), QwtMetricsMap::screenToLayoutY(), and usedFont().
.SS "QSize QwtText::textSize (const QFont & defaultFont = \fCQFont()\fP) const"
.PP
Returns the size, that is needed to render text
.PP
\fBParameters:\fP
.RS 4
\fIdefaultFont\fP Font of the text 
.RE
.PP
\fBReturns:\fP
.RS 4
Caluclated size 
.RE
.PP

.PP
Definition at line 510 of file qwt_text.cpp.
.PP
References font(), QwtMetricsMap::isIdentity(), QwtPainter::metricsMap(), QwtMetricsMap::screenToLayout(), and usedFont().
.PP
Referenced by QwtScaleDraw::boundingLabelRect(), QwtScaleDraw::drawLabel(), QwtRoundScaleDraw::drawLabel(), QwtRoundScaleDraw::extent(), QwtScaleDraw::labelRect(), and QwtPicker::trackerRect().
.SS "void QwtText::draw (QPainter * painter, const QRect & rect) const"
.PP
Draw a text into a rectangle
.PP
\fBParameters:\fP
.RS 4
\fIpainter\fP Painter 
.br
\fIrect\fP Rectangle 
.RE
.PP

.PP
Definition at line 564 of file qwt_text.cpp.
.PP
References QwtPainter::drawRect(), font(), QwtPainter::metricsMap(), QwtMetricsMap::screenToLayoutX(), and QwtMetricsMap::screenToLayoutY().
.PP
Referenced by QwtLegendItem::drawItem(), QwtScaleDraw::drawLabel(), QwtRoundScaleDraw::drawLabel(), QwtScaleWidget::drawTitle(), QwtPicker::drawTracker(), and QwtPlot::printTitle().
.SS "const \fBQwtTextEngine\fP * QwtText::textEngine (const QString & text, \fBQwtText::TextFormat\fP format = \fCAutoText\fP)\fC [static]\fP"
.PP
Find the text engine for a text format
.PP
In case of QwtText::AutoText the first text engine (beside \fBQwtPlainTextEngine\fP) is returned, where \fBQwtTextEngine::mightRender\fP returns true. If there is none \fBQwtPlainTextEngine\fP is returnd.
.PP
If no text engine is registered for the format \fBQwtPlainTextEngine\fP is returnd.
.PP
\fBParameters:\fP
.RS 4
\fItext\fP Text, needed in case of AutoText 
.br
\fIformat\fP Text format 
.RE
.PP

.PP
Definition at line 646 of file qwt_text.cpp.
.PP
Referenced by QwtText(), and setText().
.SS "const \fBQwtTextEngine\fP * QwtText::textEngine (\fBQwtText::TextFormat\fP format)\fC [static]\fP"
.PP
Find the text engine for a text format. 
.PP
textEngine can be used to find out if a text format is supported. F.e, if one wants to use MathML labels, the MathML renderer from the commercial Qt solutions package might be required, that is not available in Qt Open Source Edition environments.
.PP
\fBParameters:\fP
.RS 4
\fIformat\fP Text format 
.RE
.PP
\fBReturns:\fP
.RS 4
The text engine, or NULL if no engine is available. 
.RE
.PP

.PP
Definition at line 701 of file qwt_text.cpp.
.SS "void QwtText::setTextEngine (\fBQwtText::TextFormat\fP format, \fBQwtTextEngine\fP * engine)\fC [static]\fP"
.PP
Assign/Replace a text engine for a text format
.PP
With setTextEngine it is possible to extend Qwt with other types of text formats.
.PP
Owner of a commercial Qt license can build the qwtmathml library, that is based on the MathML renderer, that is included in MML Widget component of the Qt solutions package.
.PP
For QwtText::PlainText it is not allowed to assign a engine == NULL.
.PP
\fBParameters:\fP
.RS 4
\fIformat\fP Text format 
.br
\fIengine\fP Text engine
.RE
.PP
\fBSee also:\fP
.RS 4
\fBQwtMathMLTextEngine\fP 
.RE
.PP
\fBWarning:\fP
.RS 4
Using QwtText::AutoText does nothing. 
.RE
.PP

.PP
Definition at line 681 of file qwt_text.cpp.

.SH "Author"
.PP 
Generated automatically by Doxygen for Qwt User's Guide from the source code.
