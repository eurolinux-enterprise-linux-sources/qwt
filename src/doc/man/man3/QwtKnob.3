.TH "QwtKnob" 3 "24 May 2008" "Version 5.1.1" "Qwt User's Guide" \" -*- nroff -*-
.ad l
.nh
.SH NAME
QwtKnob \- 
.SH SYNOPSIS
.br
.PP
Inherits \fBQwtAbstractSlider\fP, and \fBQwtAbstractScale\fP.
.PP
.SH "Detailed Description"
.PP 
The Knob Widget. 

The \fBQwtKnob\fP widget imitates look and behaviour of a volume knob on a radio. It contains a scale around the knob which is set up automatically or can be configured manually (see \fBQwtAbstractScale\fP). Automatic scrolling is enabled when the user presses a mouse button on the scale. For a description of signals, slots and other members, see \fBQwtAbstractSlider\fP.
.PP
 
.PP
\fBSee also:\fP
.RS 4
\fBQwtAbstractSlider\fP and \fBQwtAbstractScale\fP for the descriptions of the inherited members. 
.RE
.PP

.PP
Definition at line 34 of file qwt_knob.h.
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBSymbol\fP { \fBLine\fP, \fBDot\fP }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBQwtKnob\fP (QWidget *parent=NULL)"
.br
.ti -1c
.RI "virtual \fB~QwtKnob\fP ()"
.br
.ti -1c
.RI "void \fBsetKnobWidth\fP (int w)"
.br
.ti -1c
.RI "int \fBknobWidth\fP () const"
.br
.ti -1c
.RI "void \fBsetTotalAngle\fP (double angle)"
.br
.ti -1c
.RI "double \fBtotalAngle\fP () const"
.br
.ti -1c
.RI "void \fBsetBorderWidth\fP (int bw)"
.br
.ti -1c
.RI "int \fBborderWidth\fP () const"
.br
.ti -1c
.RI "void \fBsetSymbol\fP (\fBSymbol\fP)"
.br
.ti -1c
.RI "\fBSymbol\fP \fBsymbol\fP () const"
.br
.ti -1c
.RI "virtual QSize \fBsizeHint\fP () const"
.br
.ti -1c
.RI "virtual QSize \fBminimumSizeHint\fP () const"
.br
.ti -1c
.RI "void \fBsetScaleDraw\fP (\fBQwtRoundScaleDraw\fP *)"
.br
.ti -1c
.RI "const \fBQwtRoundScaleDraw\fP * \fBscaleDraw\fP () const"
.br
.ti -1c
.RI "\fBQwtRoundScaleDraw\fP * \fBscaleDraw\fP ()"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual void \fBpaintEvent\fP (QPaintEvent *e)"
.br
.ti -1c
.RI "virtual void \fBresizeEvent\fP (QResizeEvent *e)"
.br
.ti -1c
.RI "void \fBdraw\fP (QPainter *p, const QRect &ur)"
.br
.ti -1c
.RI "void \fBdrawKnob\fP (QPainter *p, const QRect &r)"
.br
.ti -1c
.RI "void \fBdrawMarker\fP (QPainter *p, double arc, const QColor &c)"
.br
.in -1c
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBQwtKnob::Symbol\fP"
.PP
Symbol 
.PP
\fBSee also:\fP
.RS 4
\fBQwtKnob::QwtKnob()\fP 
.RE
.PP

.PP
Definition at line 49 of file qwt_knob.h.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "QwtKnob::QwtKnob (QWidget * parent = \fCNULL\fP)\fC [explicit]\fP"
.PP
Constructor 
.PP
\fBParameters:\fP
.RS 4
\fIparent\fP Parent widget 
.RE
.PP

.PP
Definition at line 59 of file qwt_knob.cpp.
.SS "QwtKnob::~QwtKnob ()\fC [virtual]\fP"
.PP
Destructor. 
.PP
Definition at line 99 of file qwt_knob.cpp.
.SH "Member Function Documentation"
.PP 
.SS "void QwtKnob::setKnobWidth (int w)"
.PP
Change the knob's width. 
.PP
The specified width must be >= 5, or it will be clipped. 
.PP
\fBParameters:\fP
.RS 4
\fIw\fP New width 
.RE
.PP

.PP
Definition at line 453 of file qwt_knob.cpp.
.SS "int QwtKnob::knobWidth () const"
.PP
Return the width of the knob. 
.PP
Definition at line 460 of file qwt_knob.cpp.
.SS "void QwtKnob::setTotalAngle (double angle)"
.PP
Set the total angle by which the knob can be turned. 
.PP
\fBParameters:\fP
.RS 4
\fIangle\fP Angle in degrees.
.RE
.PP
The default angle is 270 degrees. It is possible to specify an angle of more than 360 degrees so that the knob can be turned several times around its axis. 
.PP
Definition at line 134 of file qwt_knob.cpp.
.PP
References scaleDraw(), and QwtRoundScaleDraw::setAngleRange().
.PP
Referenced by setScaleDraw().
.SS "double QwtKnob::totalAngle () const"
.PP
Return the total angle. 
.PP
Definition at line 147 of file qwt_knob.cpp.
.SS "void QwtKnob::setBorderWidth (int bw)"
.PP
Set the knob's border width. 
.PP
\fBParameters:\fP
.RS 4
\fIbw\fP new border width 
.RE
.PP

.PP
Definition at line 469 of file qwt_knob.cpp.
.SS "int QwtKnob::borderWidth () const"
.PP
Return the border width. 
.PP
Definition at line 476 of file qwt_knob.cpp.
.SS "void QwtKnob::setSymbol (\fBQwtKnob::Symbol\fP s)"
.PP
Set the symbol of the knob. 
.PP
\fBSee also:\fP
.RS 4
\fBsymbol()\fP 
.RE
.PP

.PP
Definition at line 108 of file qwt_knob.cpp.
.SS "\fBQwtKnob::Symbol\fP QwtKnob::symbol () const"
.PP
\fBReturns:\fP
.RS 4
symbol of the knob 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBsetSymbol()\fP 
.RE
.PP

.PP
Definition at line 121 of file qwt_knob.cpp.
.SS "QSize QwtKnob::sizeHint () const\fC [virtual]\fP"
.PP
\fBReturns:\fP
.RS 4
\fBminimumSizeHint()\fP 
.RE
.PP

.PP
Definition at line 527 of file qwt_knob.cpp.
.PP
References minimumSizeHint().
.SS "QSize QwtKnob::minimumSizeHint () const\fC [virtual]\fP"
.PP
Return a minimum size hint. 
.PP
\fBWarning:\fP
.RS 4
The return value of \fBQwtKnob::minimumSizeHint()\fP depends on the font and the scale. 
.RE
.PP

.PP
Definition at line 537 of file qwt_knob.cpp.
.PP
References QwtRoundScaleDraw::extent(), and scaleDraw().
.PP
Referenced by sizeHint().
.SS "void QwtKnob::setScaleDraw (\fBQwtRoundScaleDraw\fP * scaleDraw)"
.PP
Change the scale draw of the knob
.PP
For changing the labels of the scales, it is necessary to derive from \fBQwtRoundScaleDraw\fP and overload \fBQwtRoundScaleDraw::label()\fP.
.PP
\fBSee also:\fP
.RS 4
\fBscaleDraw()\fP 
.RE
.PP

.PP
Definition at line 161 of file qwt_knob.cpp.
.PP
References scaleDraw(), QwtAbstractScale::setAbstractScaleDraw(), and setTotalAngle().
.SS "const \fBQwtRoundScaleDraw\fP * QwtKnob::scaleDraw () const"
.PP
\fBReturns:\fP
.RS 4
the scale draw of the knob 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBsetScaleDraw()\fP 
.RE
.PP

.PP
Definition at line 171 of file qwt_knob.cpp.
.PP
References QwtAbstractScale::abstractScaleDraw().
.PP
Referenced by draw(), minimumSizeHint(), setScaleDraw(), and setTotalAngle().
.SS "\fBQwtRoundScaleDraw\fP * QwtKnob::scaleDraw ()"
.PP
\fBReturns:\fP
.RS 4
the scale draw of the knob 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBsetScaleDraw()\fP 
.RE
.PP

.PP
Definition at line 180 of file qwt_knob.cpp.
.PP
References QwtAbstractScale::abstractScaleDraw().
.SS "void QwtKnob::paintEvent (QPaintEvent * e)\fC [protected, virtual]\fP"
.PP
Repaint the knob. 
.PP
Definition at line 363 of file qwt_knob.cpp.
.PP
References draw().
.SS "void QwtKnob::resizeEvent (QResizeEvent * e)\fC [protected, virtual]\fP"
.PP
Qt Resize Event. 
.PP
Definition at line 332 of file qwt_knob.cpp.
.SS "void QwtKnob::draw (QPainter * p, const QRect & ur)\fC [protected]\fP"
.PP
Repaint the knob. 
.PP
Definition at line 383 of file qwt_knob.cpp.
.PP
References QwtAbstractScaleDraw::draw(), QwtPainter::drawFocusRect(), drawKnob(), and scaleDraw().
.PP
Referenced by paintEvent().
.SS "void QwtKnob::drawKnob (QPainter * painter, const QRect & r)\fC [protected]\fP"
.PP
Draw the knob. 
.PP
\fBParameters:\fP
.RS 4
\fIpainter\fP painter 
.br
\fIr\fP Bounding rectangle of the knob (without scale) 
.RE
.PP

.PP
Definition at line 190 of file qwt_knob.cpp.
.PP
References drawMarker(), and QwtAbstractSlider::isValid().
.PP
Referenced by draw().
.SS "void QwtKnob::drawMarker (QPainter * p, double arc, const QColor & c)\fC [protected]\fP"
.PP
Draw the marker at the knob's front. 
.PP
\fBParameters:\fP
.RS 4
\fIp\fP Painter 
.br
\fIarc\fP Angle of the marker 
.br
\fIc\fP Marker color 
.RE
.PP

.PP
Definition at line 406 of file qwt_knob.cpp.
.PP
Referenced by drawKnob().

.SH "Author"
.PP 
Generated automatically by Doxygen for Qwt User's Guide from the source code.
