.TH "QwtSpline" 3 "24 May 2008" "Version 5.1.1" "Qwt User's Guide" \" -*- nroff -*-
.ad l
.nh
.SH NAME
QwtSpline \- 
.SH SYNOPSIS
.br
.PP
.SH "Detailed Description"
.PP 
A class for spline interpolation. 

The \fBQwtSpline\fP class is used for cubical spline interpolation. Two types of splines, natural and periodic, are supported.
.PP
\fBUsage:\fP.RS 4

.PD 0

.IP "1." 4
First call \fBsetPoints()\fP to determine the spline coefficients for a tabulated function y(x). 
.IP "2." 4
After the coefficients have been set up, the interpolated function value for an argument x can be determined by calling \fBQwtSpline::value()\fP. 
.PP
.RE
.PP
\fBExample:\fP.RS 4

.PP
.nf
#include <qwt_spline.h>

QPolygonF interpolate(const QPolygonF& points, int numValues)
{
    QwtSpline spline;
    if ( !spline.setPoints(points) ) 
        return points;

    QPolygonF interpolatedPoints(numValues);

    const double delta = 
        (points[numPoints - 1].x() - points[0].x()) / (points.size() - 1);
    for(i = 0; i < points.size(); i++)  / interpolate
    {
        const double x = points[0].x() + i * delta;
        interpolatedPoints[i].setX(x);
        interpolatedPoints[i].setY(spline.value(x));
    }
    return interpolatedPoints;
}

.fi
.PP
 
.RE
.PP

.PP
Definition at line 77 of file qwt_spline.h.
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBSplineType\fP { \fBNatural\fP, \fBPeriodic\fP }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBQwtSpline\fP ()"
.br
.ti -1c
.RI "\fBQwtSpline\fP (const \fBQwtSpline\fP &)"
.br
.ti -1c
.RI "\fB~QwtSpline\fP ()"
.br
.ti -1c
.RI "\fBQwtSpline\fP & \fBoperator=\fP (const \fBQwtSpline\fP &)"
.br
.ti -1c
.RI "void \fBsetSplineType\fP (\fBSplineType\fP)"
.br
.ti -1c
.RI "\fBSplineType\fP \fBsplineType\fP () const"
.br
.ti -1c
.RI "bool \fBsetPoints\fP (const QPolygonF &points)"
.br
.ti -1c
.RI "QPolygonF \fBpoints\fP () const"
.br
.ti -1c
.RI "void \fBreset\fP ()"
.br
.ti -1c
.RI "bool \fBisValid\fP () const"
.br
.ti -1c
.RI "double \fBvalue\fP (double x) const"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "bool \fBbuildNaturalSpline\fP (const QPolygonF &)"
.br
.ti -1c
.RI "bool \fBbuildPeriodicSpline\fP (const QPolygonF &)"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "PrivateData * \fBd_data\fP"
.br
.in -1c
.SH "Constructor & Destructor Documentation"
.PP 
.SS "QwtSpline::QwtSpline ()"
.PP
Constructor. 
.PP
Definition at line 73 of file qwt_spline.cpp.
.PP
References d_data.
.SS "QwtSpline::~QwtSpline ()"
.PP
Destructor. 
.PP
Definition at line 90 of file qwt_spline.cpp.
.PP
References d_data.
.SH "Member Function Documentation"
.PP 
.SS "bool QwtSpline::setPoints (const QPolygonF & points)"
.PP
Determine the function table index corresponding to a value x Calculate the spline coefficients. 
.PP
Depending on the value of \fIperiodic\fP, this function will determine the coefficients for a natural or a periodic spline and store them internally.
.PP
\fBParameters:\fP
.RS 4
\fIx\fP 
.br
\fIy\fP points 
.br
\fIsize\fP number of points 
.br
\fIperiodic\fP if true, calculate periodic spline 
.RE
.PP
\fBReturns:\fP
.RS 4
true if successful 
.RE
.PP
\fBWarning:\fP
.RS 4
The sequence of x (but not y) values has to be strictly monotone increasing, which means \fCx[0] < x[1] < .... < x[n-1]\fP. If this is not the case, the function will return false 
.RE
.PP

.PP
Definition at line 126 of file qwt_spline.cpp.
.SS "QPolygonF QwtSpline::points () const"
.PP
Return points passed by setPoints 
.PP
Definition at line 164 of file qwt_spline.cpp.
.SS "void QwtSpline::reset ()"
.PP
Free allocated memory and set size to 0. 
.PP
Definition at line 172 of file qwt_spline.cpp.
.PP
References d_data.
.SS "bool QwtSpline::isValid () const"
.PP
True if valid. 
.PP
Definition at line 181 of file qwt_spline.cpp.
.PP
References d_data.
.SS "double QwtSpline::value (double x) const"
.PP
Calculate the interpolated function value corresponding to a given argument x. 
.PP
Definition at line 190 of file qwt_spline.cpp.
.PP
References d_data.
.SS "bool QwtSpline::buildNaturalSpline (const QPolygonF & points)\fC [protected]\fP"
.PP
Determines the coefficients for a natural spline. 
.PP
\fBReturns:\fP
.RS 4
true if successful 
.RE
.PP

.PP
Definition at line 209 of file qwt_spline.cpp.
.SS "bool QwtSpline::buildPeriodicSpline (const QPolygonF & points)\fC [protected]\fP"
.PP
Determines the coefficients for a periodic spline. 
.PP
\fBReturns:\fP
.RS 4
true if successful 
.RE
.PP

.PP
Definition at line 292 of file qwt_spline.cpp.

.SH "Author"
.PP 
Generated automatically by Doxygen for Qwt User's Guide from the source code.
