.TH "QwtCounter" 3 "24 May 2008" "Version 5.1.1" "Qwt User's Guide" \" -*- nroff -*-
.ad l
.nh
.SH NAME
QwtCounter \- 
.SH SYNOPSIS
.br
.PP
Inherits \fBQwtDoubleRange\fP.
.PP
.SH "Detailed Description"
.PP 
The Counter Widget. 

A Counter consists of a label displaying a number and one ore more (up to three) push buttons on each side of the label which can be used to increment or decrement the counter's value.
.PP
A Counter has a range from a minimum value to a maximum value and a step size. The range can be specified using QwtDblRange::setRange(). The counter's value is an integer multiple of the step size. The number of steps by which a button increments or decrements the value can be specified using \fBQwtCounter::setIncSteps()\fP. The number of buttons can be changed with \fBQwtCounter::setNumButtons()\fP.
.PP
Holding the space bar down with focus on a button is the fastest method to step through the counter values. When the counter underflows/overflows, the focus is set to the smallest up/down button and counting is disabled. Counting is re-enabled on a button release event (mouse or space bar).
.PP
Example: 
.PP
.nf
#include '../include/qwt_counter.h>

QwtCounter *cnt;

cnt = new QwtCounter(parent, name);

cnt->setRange(0.0, 100.0, 1.0);             // From 0.0 to 100, step 1.0
cnt->setNumButtons(2);                      // Two buttons each side
cnt->setIncSteps(QwtCounter::Button1, 1);   // Button 1 increments 1 step
cnt->setIncSteps(QwtCounter::Button2, 20);  // Button 2 increments 20 steps

connect(cnt, SIGNAL(valueChanged(double)), my_class, SLOT(newValue(double)));

.fi
.PP
 
.PP
Definition at line 60 of file qwt_counter.h.
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBButton\fP { \fBButton1\fP, \fBButton2\fP, \fBButton3\fP, \fBButtonCnt\fP }"
.br
.in -1c
.SS "Signals"

.in +1c
.ti -1c
.RI "void \fBbuttonReleased\fP (double value)"
.br
.ti -1c
.RI "void \fBvalueChanged\fP (double value)"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBQwtCounter\fP (QWidget *parent=NULL)"
.br
.ti -1c
.RI "virtual \fB~QwtCounter\fP ()"
.br
.ti -1c
.RI "bool \fBeditable\fP () const"
.br
.ti -1c
.RI "void \fBsetEditable\fP (bool)"
.br
.ti -1c
.RI "void \fBsetNumButtons\fP (int n)"
.br
.ti -1c
.RI "int \fBnumButtons\fP () const"
.br
.ti -1c
.RI "void \fBsetIncSteps\fP (\fBQwtCounter::Button\fP btn, int nSteps)"
.br
.ti -1c
.RI "int \fBincSteps\fP (\fBQwtCounter::Button\fP btn) const"
.br
.ti -1c
.RI "virtual void \fBsetValue\fP (double)"
.br
.ti -1c
.RI "virtual QSize \fBsizeHint\fP () const"
.br
.ti -1c
.RI "virtual void \fBpolish\fP ()"
.br
.ti -1c
.RI "double \fBstep\fP () const"
.br
.ti -1c
.RI "void \fBsetStep\fP (double s)"
.br
.ti -1c
.RI "double \fBminVal\fP () const"
.br
.ti -1c
.RI "void \fBsetMinValue\fP (double m)"
.br
.ti -1c
.RI "double \fBmaxVal\fP () const"
.br
.ti -1c
.RI "void \fBsetMaxValue\fP (double m)"
.br
.ti -1c
.RI "void \fBsetStepButton1\fP (int nSteps)"
.br
.ti -1c
.RI "int \fBstepButton1\fP () const"
.br
.ti -1c
.RI "void \fBsetStepButton2\fP (int nSteps)"
.br
.ti -1c
.RI "int \fBstepButton2\fP () const"
.br
.ti -1c
.RI "void \fBsetStepButton3\fP (int nSteps)"
.br
.ti -1c
.RI "int \fBstepButton3\fP () const"
.br
.ti -1c
.RI "virtual double \fBvalue\fP () const"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual bool \fBevent\fP (QEvent *)"
.br
.ti -1c
.RI "virtual void \fBwheelEvent\fP (QWheelEvent *)"
.br
.ti -1c
.RI "virtual void \fBkeyPressEvent\fP (QKeyEvent *)"
.br
.ti -1c
.RI "virtual void \fBrangeChange\fP ()"
.br
.in -1c
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBQwtCounter::Button\fP"
.PP
Button index 
.PP
Definition at line 79 of file qwt_counter.h.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "QwtCounter::QwtCounter (QWidget * parent = \fCNULL\fP)\fC [explicit]\fP"
.PP
The default number of buttons is set to 2. The default increments are: 
.PD 0

.IP "\(bu" 2
Button 1: 1 step 
.IP "\(bu" 2
Button 2: 10 steps 
.IP "\(bu" 2
Button 3: 100 steps
.PP
\fBParameters:\fP
.RS 4
\fIparent\fP 
.RE
.PP

.PP
Definition at line 50 of file qwt_counter.cpp.
.SS "QwtCounter::~QwtCounter ()\fC [virtual]\fP"
.PP
Destructor. 
.PP
Definition at line 143 of file qwt_counter.cpp.
.SH "Member Function Documentation"
.PP 
.SS "bool QwtCounter::editable () const"
.PP
returns whether the line edit is edatble. (default is yes) 
.PP
Definition at line 198 of file qwt_counter.cpp.
.SS "void QwtCounter::setEditable (bool editable)"
.PP
Allow/disallow the user to manually edit the value. 
.PP
\fBParameters:\fP
.RS 4
\fIeditable\fP true enables editing 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBeditable()\fP 
.RE
.PP

.PP
Definition at line 185 of file qwt_counter.cpp.
.SS "void QwtCounter::setNumButtons (int n)"
.PP
Specify the number of buttons on each side of the label. 
.PP
\fBParameters:\fP
.RS 4
\fIn\fP Number of buttons 
.RE
.PP

.PP
Definition at line 441 of file qwt_counter.cpp.
.SS "int QwtCounter::numButtons () const"
.PP
\fBReturns:\fP
.RS 4
The number of buttons on each side of the widget. 
.RE
.PP

.PP
Definition at line 466 of file qwt_counter.cpp.
.SS "void QwtCounter::setIncSteps (\fBQwtCounter::Button\fP btn, int nSteps)"
.PP
Specify the number of steps by which the value is incremented or decremented when a specified button is pushed.
.PP
\fBParameters:\fP
.RS 4
\fIbtn\fP One of \fCQwtCounter::Button1\fP, \fCQwtCounter::Button2\fP, \fCQwtCounter::Button3\fP 
.br
\fInSteps\fP Number of steps 
.RE
.PP

.PP
Definition at line 355 of file qwt_counter.cpp.
.PP
Referenced by setStepButton1(), setStepButton2(), and setStepButton3().
.SS "int QwtCounter::incSteps (\fBQwtCounter::Button\fP btn) const"
.PP
\fBReturns:\fP
.RS 4
the number of steps by which a specified button increments the value or 0 if the button is invalid. 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIbtn\fP One of \fCQwtCounter::Button1\fP, \fCQwtCounter::Button2\fP, \fCQwtCounter::Button3\fP 
.RE
.PP

.PP
Definition at line 367 of file qwt_counter.cpp.
.PP
Referenced by stepButton1(), stepButton2(), and stepButton3().
.SS "void QwtCounter::setValue (double v)\fC [virtual]\fP"
.PP
Set a new value. 
.PP
\fBParameters:\fP
.RS 4
\fIv\fP new value Calls \fBQwtDoubleRange::setValue\fP and does all visual updates. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBQwtDoubleRange::setValue\fP 
.RE
.PP

.PP
Reimplemented from \fBQwtDoubleRange\fP.
.PP
Definition at line 382 of file qwt_counter.cpp.
.PP
References QwtDoubleRange::setValue(), and value().
.PP
Referenced by keyPressEvent().
.SS "QSize QwtCounter::sizeHint () const\fC [virtual]\fP"
.PP
A size hint. 
.PP
Definition at line 513 of file qwt_counter.cpp.
.PP
References QwtDoubleRange::maxValue(), QwtDoubleRange::minValue(), and step().
.SS "void QwtCounter::polish ()\fC [virtual]\fP"
.PP
Sets the minimum width for the buttons 
.PP
Definition at line 151 of file qwt_counter.cpp.
.PP
Referenced by event().
.SS "double QwtCounter::step () const"
.PP
returns the step size 
.PP
Reimplemented from \fBQwtDoubleRange\fP.
.PP
Definition at line 550 of file qwt_counter.cpp.
.PP
References QwtDoubleRange::step().
.PP
Referenced by setMaxValue(), setMinValue(), and sizeHint().
.SS "void QwtCounter::setStep (double s)"
.PP
sets the step size 
.PP
Reimplemented from \fBQwtDoubleRange\fP.
.PP
Definition at line 556 of file qwt_counter.cpp.
.PP
References QwtDoubleRange::setStep().
.SS "double QwtCounter::minVal () const"
.PP
returns the minimum value of the range 
.PP
Definition at line 562 of file qwt_counter.cpp.
.PP
References QwtDoubleRange::minValue().
.SS "void QwtCounter::setMinValue (double m)"
.PP
sets the minimum value of the range 
.PP
Definition at line 568 of file qwt_counter.cpp.
.PP
References QwtDoubleRange::maxValue(), QwtDoubleRange::setRange(), and step().
.SS "double QwtCounter::maxVal () const"
.PP
returns the maximum value of the range 
.PP
Definition at line 574 of file qwt_counter.cpp.
.PP
References QwtDoubleRange::maxValue().
.SS "void QwtCounter::setMaxValue (double m)"
.PP
sets the maximum value of the range 
.PP
Definition at line 580 of file qwt_counter.cpp.
.PP
References QwtDoubleRange::minValue(), QwtDoubleRange::setRange(), and step().
.SS "void QwtCounter::setStepButton1 (int nSteps)"
.PP
set the number of increment steps for button 1 
.PP
Definition at line 586 of file qwt_counter.cpp.
.PP
References setIncSteps().
.SS "int QwtCounter::stepButton1 () const"
.PP
returns the number of increment steps for button 1 
.PP
Definition at line 592 of file qwt_counter.cpp.
.PP
References incSteps().
.SS "void QwtCounter::setStepButton2 (int nSteps)"
.PP
set the number of increment steps for button 2 
.PP
Definition at line 598 of file qwt_counter.cpp.
.PP
References setIncSteps().
.SS "int QwtCounter::stepButton2 () const"
.PP
returns the number of increment steps for button 2 
.PP
Definition at line 604 of file qwt_counter.cpp.
.PP
References incSteps().
.SS "void QwtCounter::setStepButton3 (int nSteps)"
.PP
set the number of increment steps for button 3 
.PP
Definition at line 610 of file qwt_counter.cpp.
.PP
References setIncSteps().
.SS "int QwtCounter::stepButton3 () const"
.PP
returns the number of increment steps for button 3 
.PP
Definition at line 616 of file qwt_counter.cpp.
.PP
References incSteps().
.SS "double QwtCounter::value () const\fC [virtual]\fP"
.PP
Returns the current value. 
.PP
Reimplemented from \fBQwtDoubleRange\fP.
.PP
Definition at line 621 of file qwt_counter.cpp.
.PP
References QwtDoubleRange::value().
.PP
Referenced by setValue().
.SS "void QwtCounter::buttonReleased (double value)\fC [signal]\fP"
.PP
This signal is emitted when a button has been released 
.PP
\fBParameters:\fP
.RS 4
\fIvalue\fP The new value 
.RE
.PP

.SS "void QwtCounter::valueChanged (double value)\fC [signal]\fP"
.PP
This signal is emitted when the counter's value has changed 
.PP
\fBParameters:\fP
.RS 4
\fIvalue\fP The new value 
.RE
.PP

.SS "bool QwtCounter::event (QEvent * e)\fC [protected, virtual]\fP"
.PP
Handle PolishRequest events 
.PP
Definition at line 206 of file qwt_counter.cpp.
.PP
References polish().
.SS "void QwtCounter::keyPressEvent (QKeyEvent * e)\fC [protected, virtual]\fP"
.PP
Handles key events
.PP
.IP "\(bu" 2
Ctrl + Qt::Key_Home Step to \fBminValue()\fP
.IP "\(bu" 2
Ctrl + Qt::Key_End Step to \fBmaxValue()\fP
.IP "\(bu" 2
Qt::Key_Up Increment by incSteps(QwtCounter::Button1)
.IP "\(bu" 2
Qt::Key_Down Decrement by incSteps(QwtCounter::Button1)
.IP "\(bu" 2
Qt::Key_PageUp Increment by incSteps(QwtCounter::Button2)
.IP "\(bu" 2
Qt::Key_PageDown Decrement by incSteps(QwtCounter::Button2)
.IP "\(bu" 2
Shift + Qt::Key_PageUp Increment by incSteps(QwtCounter::Button3)
.IP "\(bu" 2
Shift + Qt::Key_PageDown Decrement by incSteps(QwtCounter::Button3) 
.PP

.PP
Definition at line 236 of file qwt_counter.cpp.
.PP
References QwtDoubleRange::incValue(), QwtDoubleRange::maxValue(), QwtDoubleRange::minValue(), and setValue().
.SS "void QwtCounter::rangeChange ()\fC [protected, virtual]\fP"
.PP
Notify change of range. 
.PP
This function updates the enabled property of all buttons contained in \fBQwtCounter\fP. 
.PP
Reimplemented from \fBQwtDoubleRange\fP.
.PP
Definition at line 507 of file qwt_counter.cpp.

.SH "Author"
.PP 
Generated automatically by Doxygen for Qwt User's Guide from the source code.
