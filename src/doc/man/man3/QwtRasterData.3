.TH "QwtRasterData" 3 "24 May 2008" "Version 5.1.1" "Qwt User's Guide" \" -*- nroff -*-
.ad l
.nh
.SH NAME
QwtRasterData \- 
.SH SYNOPSIS
.br
.PP
Inherited by QwtPlotSpectrogram::PrivateData::DummyData.
.PP
.SH "Detailed Description"
.PP 
\fBQwtRasterData\fP defines an interface to any type of raster data. 
.PP
Definition at line 53 of file qwt_raster_data.h.
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBConrecAttribute\fP { \fBIgnoreAllVerticesOnLevel\fP =  1, \fBIgnoreOutOfRange\fP =  2 }"
.br
.ti -1c
.RI "typedef QMap< double, QPolygonF > \fBContourLines\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBQwtRasterData\fP ()"
.br
.ti -1c
.RI "\fBQwtRasterData\fP (const \fBQwtDoubleRect\fP &)"
.br
.ti -1c
.RI "virtual \fB~QwtRasterData\fP ()"
.br
.ti -1c
.RI "virtual \fBQwtRasterData\fP * \fBcopy\fP () const=0"
.br
.ti -1c
.RI "virtual void \fBsetBoundingRect\fP (const \fBQwtDoubleRect\fP &)"
.br
.ti -1c
.RI "\fBQwtDoubleRect\fP \fBboundingRect\fP () const"
.br
.ti -1c
.RI "virtual QSize \fBrasterHint\fP (const \fBQwtDoubleRect\fP &) const"
.br
.ti -1c
.RI "virtual void \fBinitRaster\fP (const \fBQwtDoubleRect\fP &, const QSize &raster)"
.br
.ti -1c
.RI "virtual void \fBdiscardRaster\fP ()"
.br
.ti -1c
.RI "virtual double \fBvalue\fP (double x, double y) const=0"
.br
.ti -1c
.RI "virtual \fBQwtDoubleInterval\fP \fBrange\fP () const=0"
.br
.ti -1c
.RI "virtual \fBContourLines\fP \fBcontourLines\fP (const \fBQwtDoubleRect\fP &rect, const QSize &raster, const QList< double > &levels, int flags) const"
.br
.in -1c
.SH "Member Function Documentation"
.PP 
.SS "virtual \fBQwtRasterData\fP* QwtRasterData::copy () const\fC [pure virtual]\fP"
.PP
Clone the data. 
.PP
Referenced by QwtPlotSpectrogram::setData().
.SS "QSize QwtRasterData::rasterHint (const \fBQwtDoubleRect\fP &) const\fC [virtual]\fP"
.PP
Find the raster of the data for an area. 
.PP
The resolution is the number of horizontal and vertical pixels that the data can return for an area. An invalid resolution indicates that the data can return values for any detail level.
.PP
The resolution will limit the size of the image that is rendered from the data. F.e. this might be important when printing a spectrogram to a A0 printer with 600 dpi.
.PP
The default implementation returns an invalid resolution (size)
.PP
\fBParameters:\fP
.RS 4
\fIrect\fP In most implementations the resolution of the data doesn't depend on the requested rectangle.
.RE
.PP
\fBReturns:\fP
.RS 4
Resolution, as number of horizontal and vertical pixels 
.RE
.PP

.PP
Definition at line 258 of file qwt_raster_data.cpp.
.SS "void QwtRasterData::initRaster (const \fBQwtDoubleRect\fP &, const QSize & raster)\fC [virtual]\fP"
.PP
Initialize a raster. 
.PP
Before the composition of an image \fBQwtPlotSpectrogram\fP calls initRaster, announcing the area and its resolution that will be requested.
.PP
The default implementation does nothing, but for data sets that are stored in files, it might be good idea to reimplement initRaster, where the data is resampled and loaded into memory.
.PP
\fBParameters:\fP
.RS 4
\fIrect\fP Area of the raster 
.br
\fIraster\fP Number of horizontal and vertical pixels
.RE
.PP
\fBSee also:\fP
.RS 4
\fBinitRaster()\fP, \fBvalue()\fP 
.RE
.PP

.PP
Definition at line 222 of file qwt_raster_data.cpp.
.SS "void QwtRasterData::discardRaster ()\fC [virtual]\fP"
.PP
Discard a raster. 
.PP
After the composition of an image \fBQwtPlotSpectrogram\fP calls \fBdiscardRaster()\fP.
.PP
The default implementation does nothing, but if data has been loaded in \fBinitRaster()\fP, it could deleted now.
.PP
\fBSee also:\fP
.RS 4
\fBinitRaster()\fP, \fBvalue()\fP 
.RE
.PP

.PP
Definition at line 236 of file qwt_raster_data.cpp.
.SS "virtual double QwtRasterData::value (double x, double y) const\fC [pure virtual]\fP"
.PP
\fBReturns:\fP
.RS 4
the value at a raster position 
.RE
.PP

.PP
.SS "virtual \fBQwtDoubleInterval\fP QwtRasterData::range () const\fC [pure virtual]\fP"
.PP
\fBReturns:\fP
.RS 4
the range of the values 
.RE
.PP

.PP
.SS "\fBQwtRasterData::ContourLines\fP QwtRasterData::contourLines (const \fBQwtDoubleRect\fP & rect, const QSize & raster, const QList< double > & levels, int flags) const\fC [virtual]\fP"
.PP
Calculate contour lines
.PP
An adaption of CONREC, a simple contouring algorithm. http://astronomy.swin.edu.au/~pbourke/projection/conrec 
.PP
Definition at line 270 of file qwt_raster_data.cpp.
.PP
References QwtDoubleInterval::contains(), and QwtDoubleInterval::isValid().

.SH "Author"
.PP 
Generated automatically by Doxygen for Qwt User's Guide from the source code.
