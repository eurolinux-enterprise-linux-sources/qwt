.TH "QwtPanner" 3 "24 May 2008" "Version 5.1.1" "Qwt User's Guide" \" -*- nroff -*-
.ad l
.nh
.SH NAME
QwtPanner \- 
.SH SYNOPSIS
.br
.PP
Inherited by \fBQwtPlotPanner\fP.
.PP
.SH "Detailed Description"
.PP 
\fBQwtPanner\fP provides panning of a widget. 

\fBQwtPanner\fP grabs the contents of a widget, that can be dragged in all directions. The offset between the start and the end position is emitted by the panned signal.
.PP
\fBQwtPanner\fP grabs the content of the widget into a pixmap and moves the pixmap around, without initiating any repaint events for the widget. Areas, that are not part of content are not painted while panning in in process. This makes panning fast enough for widgets, where repaints are too slow for mouse movements.
.PP
For widgets, where repaints are very fast it might be better to implement panning manually by mapping mouse events into paint events. 
.PP
Definition at line 35 of file qwt_panner.h.
.SS "Signals"

.in +1c
.ti -1c
.RI "void \fBpanned\fP (int dx, int dy)"
.br
.ti -1c
.RI "void \fBmoved\fP (int dx, int dy)"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBQwtPanner\fP (QWidget *parent)"
.br
.ti -1c
.RI "virtual \fB~QwtPanner\fP ()"
.br
.ti -1c
.RI "void \fBsetEnabled\fP (bool)"
.br
.ti -1c
.RI "bool \fBisEnabled\fP () const"
.br
.ti -1c
.RI "void \fBsetMouseButton\fP (int button, int buttonState=Qt::NoButton)"
.br
.ti -1c
.RI "void \fBgetMouseButton\fP (int &button, int &buttonState) const "
.br
.ti -1c
.RI "void \fBsetAbortKey\fP (int key, int state=Qt::NoButton)"
.br
.ti -1c
.RI "void \fBgetAbortKey\fP (int &key, int &state) const "
.br
.ti -1c
.RI "void \fBsetCursor\fP (const QCursor &)"
.br
.ti -1c
.RI "const QCursor \fBcursor\fP () const"
.br
.ti -1c
.RI "void \fBsetOrientations\fP (Qt::Orientations)"
.br
.ti -1c
.RI "Qt::Orientations \fBorientations\fP () const"
.br
.ti -1c
.RI "bool \fBisOrientationEnabled\fP (Qt::Orientation) const"
.br
.ti -1c
.RI "virtual bool \fBeventFilter\fP (QObject *, QEvent *)"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual void \fBwidgetMousePressEvent\fP (QMouseEvent *)"
.br
.ti -1c
.RI "virtual void \fBwidgetMouseReleaseEvent\fP (QMouseEvent *)"
.br
.ti -1c
.RI "virtual void \fBwidgetMouseMoveEvent\fP (QMouseEvent *)"
.br
.ti -1c
.RI "virtual void \fBwidgetKeyPressEvent\fP (QKeyEvent *)"
.br
.ti -1c
.RI "virtual void \fBwidgetKeyReleaseEvent\fP (QKeyEvent *)"
.br
.ti -1c
.RI "virtual void \fBpaintEvent\fP (QPaintEvent *)"
.br
.in -1c
.SH "Constructor & Destructor Documentation"
.PP 
.SS "QwtPanner::QwtPanner (QWidget * parent)"
.PP
Creates an panner that is enabled for the left mouse button.
.PP
\fBParameters:\fP
.RS 4
\fIparent\fP Parent widget to be panned 
.RE
.PP

.PP
Definition at line 121 of file qwt_panner.cpp.
.PP
References setEnabled().
.SS "QwtPanner::~QwtPanner ()\fC [virtual]\fP"
.PP
Destructor. 
.PP
Definition at line 140 of file qwt_panner.cpp.
.SH "Member Function Documentation"
.PP 
.SS "void QwtPanner::setEnabled (bool on)"
.PP
En/disable the panner. 
.PP
When enabled is true an event filter is installed for the observed widget, otherwise the event filter is removed.
.PP
\fBParameters:\fP
.RS 4
\fIon\fP true or false 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBisEnabled()\fP, \fBeventFilter()\fP 
.RE
.PP

.PP
Definition at line 220 of file qwt_panner.cpp.
.PP
Referenced by QwtPanner(), and widgetMousePressEvent().
.SS "bool QwtPanner::isEnabled () const"
.PP
\fBReturns:\fP
.RS 4
true when enabled, false otherwise 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBsetEnabled\fP, \fBeventFilter()\fP 
.RE
.PP

.PP
Definition at line 287 of file qwt_panner.cpp.
.SS "void QwtPanner::setMouseButton (int button, int buttonState = \fCQt::NoButton\fP)"
.PP
Change the mouse button The defaults are Qt::LeftButton and Qt::NoButton 
.PP
Definition at line 149 of file qwt_panner.cpp.
.SS "void QwtPanner::getMouseButton (int & button, int & buttonState) const"
.PP
Get the mouse button. 
.PP
Definition at line 156 of file qwt_panner.cpp.
.SS "void QwtPanner::setAbortKey (int key, int state = \fCQt::NoButton\fP)"
.PP
Change the abort key The defaults are Qt::Key_Escape and Qt::NoButton 
.PP
Definition at line 166 of file qwt_panner.cpp.
.SS "void QwtPanner::getAbortKey (int & key, int & state) const"
.PP
Get the abort key. 
.PP
Definition at line 173 of file qwt_panner.cpp.
.SS "void QwtPanner::setCursor (const QCursor & cursor)"
.PP
Change the cursor, that is active while panning The default is the cursor of the parent widget.
.PP
\fBParameters:\fP
.RS 4
\fIcursor\fP New cursor
.RE
.PP
\fBSee also:\fP
.RS 4
\fBsetCursor()\fP 
.RE
.PP

.PP
Definition at line 188 of file qwt_panner.cpp.
.SS "const QCursor QwtPanner::cursor () const"
.PP
\fBReturns:\fP
.RS 4
Cursor that is active while panning 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBsetCursor()\fP 
.RE
.PP

.PP
Definition at line 199 of file qwt_panner.cpp.
.SS "void QwtPanner::setOrientations (Qt::Orientations o)"
.PP
Set the orientations, where panning is enabled The default value is in both directions: Qt::Horizontal | Qt::Vertical
.PP
/param o Orientation 
.PP
Definition at line 249 of file qwt_panner.cpp.
.SS "Qt::Orientations QwtPanner::orientations () const"
.PP
Return the orientation, where paning is enabled. 
.PP
Definition at line 255 of file qwt_panner.cpp.
.SS "bool QwtPanner::isOrientationEnabled (Qt::Orientation o) const"
.PP
Return true if a orientatio is enabled 
.PP
\fBSee also:\fP
.RS 4
\fBorientations()\fP, \fBsetOrientations()\fP 
.RE
.PP

.PP
Definition at line 272 of file qwt_panner.cpp.
.PP
Referenced by widgetMouseMoveEvent(), and widgetMouseReleaseEvent().
.SS "bool QwtPanner::eventFilter (QObject * o, QEvent * e)\fC [virtual]\fP"
.PP
Event filter. 
.PP
When \fBisEnabled()\fP the mouse events of the observed widget are filtered.
.PP
\fBSee also:\fP
.RS 4
\fBwidgetMousePressEvent()\fP, \fBwidgetMouseReleaseEvent()\fP, \fBwidgetMouseMoveEvent()\fP 
.RE
.PP

.PP
Definition at line 341 of file qwt_panner.cpp.
.PP
References widgetKeyPressEvent(), widgetKeyReleaseEvent(), widgetMouseMoveEvent(), widgetMousePressEvent(), and widgetMouseReleaseEvent().
.SS "void QwtPanner::panned (int dx, int dy)\fC [signal]\fP"
.PP
Signal emitted, when panning is done
.PP
\fBParameters:\fP
.RS 4
\fIdx\fP Offset in horizontal direction 
.br
\fIdy\fP Offset in vertical direction 
.RE
.PP

.PP
Referenced by QwtPlotPanner::QwtPlotPanner(), and widgetMouseReleaseEvent().
.SS "void QwtPanner::moved (int dx, int dy)\fC [signal]\fP"
.PP
Signal emitted, while the widget moved, but panning is not finished.
.PP
\fBParameters:\fP
.RS 4
\fIdx\fP Offset in horizontal direction 
.br
\fIdy\fP Offset in vertical direction 
.RE
.PP

.PP
Referenced by widgetMouseMoveEvent().
.SS "void QwtPanner::widgetMousePressEvent (QMouseEvent * me)\fC [protected, virtual]\fP"
.PP
Handle a mouse press event for the observed widget.
.PP
\fBParameters:\fP
.RS 4
\fIme\fP Mouse event 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBeventFilter()\fP, \fBwidgetMouseReleaseEvent()\fP, \fBwidgetMouseMoveEvent()\fP, 
.RE
.PP

.PP
Definition at line 392 of file qwt_panner.cpp.
.PP
References setEnabled().
.PP
Referenced by eventFilter().
.SS "void QwtPanner::widgetMouseReleaseEvent (QMouseEvent * me)\fC [protected, virtual]\fP"
.PP
Handle a mouse release event for the observed widget.
.PP
\fBParameters:\fP
.RS 4
\fIme\fP Mouse event 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBeventFilter()\fP, \fBwidgetMousePressEvent()\fP, \fBwidgetMouseMoveEvent()\fP, 
.RE
.PP

.PP
Definition at line 474 of file qwt_panner.cpp.
.PP
References isOrientationEnabled(), and panned().
.PP
Referenced by eventFilter().
.SS "void QwtPanner::widgetMouseMoveEvent (QMouseEvent * me)\fC [protected, virtual]\fP"
.PP
Handle a mouse move event for the observed widget.
.PP
\fBParameters:\fP
.RS 4
\fIme\fP Mouse event 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBeventFilter()\fP, \fBwidgetMousePressEvent()\fP, \fBwidgetMouseReleaseEvent()\fP 
.RE
.PP

.PP
Definition at line 446 of file qwt_panner.cpp.
.PP
References isOrientationEnabled(), and moved().
.PP
Referenced by eventFilter().
.SS "void QwtPanner::widgetKeyPressEvent (QKeyEvent * ke)\fC [protected, virtual]\fP"
.PP
Handle a key press event for the observed widget.
.PP
\fBParameters:\fP
.RS 4
\fIke\fP Key event 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBeventFilter()\fP, \fBwidgetKeyReleaseEvent()\fP 
.RE
.PP

.PP
Definition at line 506 of file qwt_panner.cpp.
.PP
Referenced by eventFilter().
.SS "void QwtPanner::widgetKeyReleaseEvent (QKeyEvent *)\fC [protected, virtual]\fP"
.PP
Handle a key release event for the observed widget.
.PP
\fBParameters:\fP
.RS 4
\fIke\fP Key event 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBeventFilter()\fP, \fBwidgetKeyReleaseEvent()\fP 
.RE
.PP

.PP
Definition at line 535 of file qwt_panner.cpp.
.PP
Referenced by eventFilter().
.SS "void QwtPanner::paintEvent (QPaintEvent * pe)\fC [protected, virtual]\fP"
.PP
Paint event. 
.PP
Repaint the grabbed pixmap on its current position and fill the empty spaces by the background of the parent widget.
.PP
\fBParameters:\fP
.RS 4
\fIpe\fP Paint event 
.RE
.PP

.PP
Definition at line 300 of file qwt_panner.cpp.

.SH "Author"
.PP 
Generated automatically by Doxygen for Qwt User's Guide from the source code.
