.TH "QwtPlot" 3 "24 May 2008" "Version 5.1.1" "Qwt User's Guide" \" -*- nroff -*-
.ad l
.nh
.SH NAME
QwtPlot \- 
.SH SYNOPSIS
.br
.PP
Inherits \fBQwtPlotDict\fP.
.PP
.SH "Detailed Description"
.PP 
A 2-D plotting widget. 

\fBQwtPlot\fP is a widget for plotting two-dimensional graphs. An unlimited number of plot items can be displayed on its canvas. Plot items might be curves (\fBQwtPlotCurve\fP), markers (\fBQwtPlotMarker\fP), the grid (\fBQwtPlotGrid\fP), or anything else derived from \fBQwtPlotItem\fP. A plot can have up to four axes, with each plot item attached to an x- and a y axis. The scales at the axes can be explicitely set (\fBQwtScaleDiv\fP), or are calculated from the plot items, using algorithms (\fBQwtScaleEngine\fP) which can be configured separately for each axis.
.PP
.PP
\fBExample\fP.RS 4
The following example shows (schematically) the most simple way to use \fBQwtPlot\fP. By default, only the left and bottom axes are visible and their scales are computed automatically. 
.PP
.nf

#include <qwt_plot.h>
#include <qwt_plot_curve.h>

QwtPlot *myPlot;
double x[100], y1[100], y2[100];        // x and y values

myPlot = new QwtPlot("Two Curves", parent);

// add curves
QwtPlotCurve *curve1 = new QwtPlotCurve("Curve 1");
QwtPlotCurve *curve2 = new QwtPlotCurve("Curve 2");

getSomeValues(x, y1, y2);

// copy the data into the curves
curve1->setData(x, y1, 100);
curve2->setData(x, y2, 100);

curve1->attach(myPlot);
curve2->attach(myPlot);

// finally, refresh the plot
myPlot->replot();

.fi
.PP
 
.RE
.PP

.PP
Definition at line 77 of file qwt_plot.h.
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBAxis\fP { \fByLeft\fP, \fByRight\fP, \fBxBottom\fP, \fBxTop\fP, \fBaxisCnt\fP }"
.br
.ti -1c
.RI "enum \fBLegendPosition\fP { \fBLeftLegend\fP, \fBRightLegend\fP, \fBBottomLegend\fP, \fBTopLegend\fP, \fBExternalLegend\fP }"
.br
.in -1c
.SS "Public Slots"

.in +1c
.ti -1c
.RI "virtual void \fBclear\fP ()"
.br
.ti -1c
.RI "virtual void \fBreplot\fP ()"
.br
.ti -1c
.RI "void \fBautoRefresh\fP ()"
.br
.in -1c
.SS "Signals"

.in +1c
.ti -1c
.RI "void \fBlegendClicked\fP (\fBQwtPlotItem\fP *plotItem)"
.br
.ti -1c
.RI "void \fBlegendChecked\fP (\fBQwtPlotItem\fP *plotItem, bool on)"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBQwtPlot\fP (QWidget *=NULL)"
.br
.ti -1c
.RI "\fBQwtPlot\fP (const \fBQwtText\fP &title, QWidget *p=NULL)"
.br
.ti -1c
.RI "virtual \fB~QwtPlot\fP ()"
.br
.ti -1c
.RI "void \fBapplyProperties\fP (const QString &)"
.br
.ti -1c
.RI "QString \fBgrabProperties\fP () const"
.br
.ti -1c
.RI "void \fBsetAutoReplot\fP (bool tf=true)"
.br
.ti -1c
.RI "bool \fBautoReplot\fP () const"
.br
.ti -1c
.RI "void \fBprint\fP (QPaintDevice &p, const \fBQwtPlotPrintFilter\fP &=\fBQwtPlotPrintFilter\fP()) const"
.br
.ti -1c
.RI "virtual void \fBprint\fP (QPainter *, const QRect &rect, const \fBQwtPlotPrintFilter\fP &=\fBQwtPlotPrintFilter\fP()) const"
.br
.ti -1c
.RI "\fBQwtPlotLayout\fP * \fBplotLayout\fP ()"
.br
.ti -1c
.RI "const \fBQwtPlotLayout\fP * \fBplotLayout\fP () const"
.br
.ti -1c
.RI "void \fBsetMargin\fP (int margin)"
.br
.ti -1c
.RI "int \fBmargin\fP () const"
.br
.ti -1c
.RI "void \fBsetTitle\fP (const QString &)"
.br
.ti -1c
.RI "void \fBsetTitle\fP (const \fBQwtText\fP &t)"
.br
.ti -1c
.RI "\fBQwtText\fP \fBtitle\fP () const"
.br
.ti -1c
.RI "\fBQwtTextLabel\fP * \fBtitleLabel\fP ()"
.br
.ti -1c
.RI "const \fBQwtTextLabel\fP * \fBtitleLabel\fP () const"
.br
.ti -1c
.RI "\fBQwtPlotCanvas\fP * \fBcanvas\fP ()"
.br
.ti -1c
.RI "const \fBQwtPlotCanvas\fP * \fBcanvas\fP () const"
.br
.ti -1c
.RI "void \fBsetCanvasBackground\fP (const QColor &c)"
.br
.ti -1c
.RI "const QColor & \fBcanvasBackground\fP () const"
.br
.ti -1c
.RI "void \fBsetCanvasLineWidth\fP (int w)"
.br
.ti -1c
.RI "int \fBcanvasLineWidth\fP () const"
.br
.ti -1c
.RI "virtual \fBQwtScaleMap\fP \fBcanvasMap\fP (int axisId) const"
.br
.ti -1c
.RI "double \fBinvTransform\fP (int axisId, int pos) const "
.br
.ti -1c
.RI "int \fBtransform\fP (int axisId, double value) const"
.br
.ti -1c
.RI "\fBQwtScaleEngine\fP * \fBaxisScaleEngine\fP (int axisId)"
.br
.ti -1c
.RI "const \fBQwtScaleEngine\fP * \fBaxisScaleEngine\fP (int axisId) const"
.br
.ti -1c
.RI "void \fBsetAxisScaleEngine\fP (int axisId, \fBQwtScaleEngine\fP *)"
.br
.ti -1c
.RI "void \fBsetAxisAutoScale\fP (int axisId)"
.br
.ti -1c
.RI "bool \fBaxisAutoScale\fP (int axisId) const"
.br
.ti -1c
.RI "void \fBenableAxis\fP (int axisId, bool tf=true)"
.br
.ti -1c
.RI "bool \fBaxisEnabled\fP (int axisId) const"
.br
.ti -1c
.RI "void \fBsetAxisFont\fP (int axisId, const QFont &f)"
.br
.ti -1c
.RI "QFont \fBaxisFont\fP (int axisId) const"
.br
.ti -1c
.RI "void \fBsetAxisScale\fP (int axisId, double min, double max, double step=0)"
.br
.ti -1c
.RI "void \fBsetAxisScaleDiv\fP (int axisId, const \fBQwtScaleDiv\fP &)"
.br
.ti -1c
.RI "void \fBsetAxisScaleDraw\fP (int axisId, \fBQwtScaleDraw\fP *)"
.br
.ti -1c
.RI "double \fBaxisStepSize\fP (int axisId) const"
.br
.ti -1c
.RI "const \fBQwtScaleDiv\fP * \fBaxisScaleDiv\fP (int axisId) const"
.br
.ti -1c
.RI "\fBQwtScaleDiv\fP * \fBaxisScaleDiv\fP (int axisId)"
.br
.ti -1c
.RI "const \fBQwtScaleDraw\fP * \fBaxisScaleDraw\fP (int axisId) const"
.br
.ti -1c
.RI "\fBQwtScaleDraw\fP * \fBaxisScaleDraw\fP (int axisId)"
.br
.ti -1c
.RI "const \fBQwtScaleWidget\fP * \fBaxisWidget\fP (int axisId) const"
.br
.ti -1c
.RI "\fBQwtScaleWidget\fP * \fBaxisWidget\fP (int axisId)"
.br
.ti -1c
.RI "void \fBsetAxisLabelAlignment\fP (int axisId, Qt::Alignment)"
.br
.ti -1c
.RI "void \fBsetAxisLabelRotation\fP (int axisId, double rotation)"
.br
.ti -1c
.RI "void \fBsetAxisTitle\fP (int axisId, const QString &)"
.br
.ti -1c
.RI "void \fBsetAxisTitle\fP (int axisId, const \fBQwtText\fP &)"
.br
.ti -1c
.RI "\fBQwtText\fP \fBaxisTitle\fP (int axisId) const"
.br
.ti -1c
.RI "void \fBsetAxisMaxMinor\fP (int axisId, int maxMinor)"
.br
.ti -1c
.RI "int \fBaxisMaxMajor\fP (int axisId) const"
.br
.ti -1c
.RI "void \fBsetAxisMaxMajor\fP (int axisId, int maxMajor)"
.br
.ti -1c
.RI "int \fBaxisMaxMinor\fP (int axisId) const"
.br
.ti -1c
.RI "void \fBinsertLegend\fP (\fBQwtLegend\fP *, \fBLegendPosition\fP=QwtPlot::RightLegend, double ratio=-1.0)"
.br
.ti -1c
.RI "\fBQwtLegend\fP * \fBlegend\fP ()"
.br
.ti -1c
.RI "const \fBQwtLegend\fP * \fBlegend\fP () const"
.br
.ti -1c
.RI "virtual void \fBpolish\fP ()"
.br
.ti -1c
.RI "virtual QSize \fBsizeHint\fP () const"
.br
.ti -1c
.RI "virtual QSize \fBminimumSizeHint\fP () const"
.br
.ti -1c
.RI "virtual void \fBupdateLayout\fP ()"
.br
.ti -1c
.RI "virtual bool \fBevent\fP (QEvent *)"
.br
.in -1c
.SS "Protected Slots"

.in +1c
.ti -1c
.RI "virtual void \fBlegendItemClicked\fP ()"
.br
.ti -1c
.RI "virtual void \fBlegendItemChecked\fP (bool)"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual void \fBdrawCanvas\fP (QPainter *)"
.br
.ti -1c
.RI "virtual void \fBdrawItems\fP (QPainter *, const QRect &, const \fBQwtScaleMap\fP maps[axisCnt], const \fBQwtPlotPrintFilter\fP &) const"
.br
.ti -1c
.RI "virtual void \fBupdateTabOrder\fP ()"
.br
.ti -1c
.RI "void \fBupdateAxes\fP ()"
.br
.ti -1c
.RI "virtual void \fBresizeEvent\fP (QResizeEvent *e)"
.br
.ti -1c
.RI "virtual void \fBprintLegendItem\fP (QPainter *, const QWidget *, const QRect &) const"
.br
.ti -1c
.RI "virtual void \fBprintTitle\fP (QPainter *, const QRect &) const"
.br
.ti -1c
.RI "virtual void \fBprintScale\fP (QPainter *, int axisId, int startDist, int endDist, int baseDist, const QRect &) const"
.br
.ti -1c
.RI "virtual void \fBprintCanvas\fP (QPainter *, const QRect &boundingRect, const QRect &canvasRect, const \fBQwtScaleMap\fP maps[axisCnt], const \fBQwtPlotPrintFilter\fP &) const"
.br
.ti -1c
.RI "virtual void \fBprintLegend\fP (QPainter *, const QRect &) const"
.br
.in -1c
.SS "Static Protected Member Functions"

.in +1c
.ti -1c
.RI "static bool \fBaxisValid\fP (int axisId)"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fBQwtPlotCanvas\fP"
.br
.in -1c
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBQwtPlot::Axis\fP"
.PP
Axis index. 
.PP
Definition at line 87 of file qwt_plot.h.
.SS "enum \fBQwtPlot::LegendPosition\fP"
.PP
Position of the legend, relative to the canvas. 
.PP
ExternalLegend means that only the content of the legend will be handled by \fBQwtPlot\fP, but not its geometry. This might be interesting if an application wants to have a legend in an external window. 
.PP
Definition at line 105 of file qwt_plot.h.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "QwtPlot::QwtPlot (QWidget * parent = \fCNULL\fP)\fC [explicit]\fP"
.PP
Constructor. 
.PP
\fBParameters:\fP
.RS 4
\fIparent\fP Parent widget 
.RE
.PP

.PP
Definition at line 52 of file qwt_plot.cpp.
.SS "QwtPlot::QwtPlot (const \fBQwtText\fP & title, QWidget * parent = \fCNULL\fP)\fC [explicit]\fP"
.PP
Constructor. 
.PP
\fBParameters:\fP
.RS 4
\fItitle\fP Title text 
.br
\fIparent\fP Parent widget 
.RE
.PP

.PP
Definition at line 63 of file qwt_plot.cpp.
.PP
References title().
.SS "QwtPlot::~QwtPlot ()\fC [virtual]\fP"
.PP
Destructor. 
.PP
Definition at line 84 of file qwt_plot.cpp.
.PP
References QwtPlotDict::autoDelete(), and QwtPlotDict::detachItems().
.SH "Member Function Documentation"
.PP 
.SS "void QwtPlot::setAutoReplot (bool tf = \fCtrue\fP)"
.PP
Set or reset the autoReplot option. 
.PP
If the autoReplot option is set, the plot will be updated implicitly by manipulating member functions. Since this may be time-consuming, it is recommended to leave this option switched off and call \fBreplot()\fP explicitly if necessary.
.PP
The autoReplot option is set to false by default, which means that the user has to call \fBreplot()\fP in order to make changes visible. 
.PP
\fBParameters:\fP
.RS 4
\fItf\fP \fCtrue\fP or \fCfalse\fP. Defaults to \fCtrue\fP. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBreplot()\fP 
.RE
.PP

.PP
Definition at line 184 of file qwt_plot.cpp.
.PP
Referenced by QwtPlotPrintFilter::apply(), QwtPlotCanvas::drawContents(), QwtPlotPanner::moveCanvas(), replot(), QwtPlotZoomer::rescale(), QwtPlotMagnifier::rescale(), and QwtPlotPrintFilter::reset().
.SS "bool QwtPlot::autoReplot () const"
.PP
\fBReturns:\fP
.RS 4
true if the autoReplot option is set. 
.RE
.PP

.PP
Definition at line 190 of file qwt_plot.cpp.
.PP
Referenced by QwtPlotPrintFilter::apply(), QwtPlotCanvas::drawContents(), QwtPlotPanner::moveCanvas(), replot(), QwtPlotZoomer::rescale(), QwtPlotMagnifier::rescale(), and QwtPlotPrintFilter::reset().
.SS "void QwtPlot::print (QPaintDevice & paintDev, const \fBQwtPlotPrintFilter\fP & pfilter = \fC\fBQwtPlotPrintFilter\fP()\fP) const"
.PP
Print the plot to a \fCQPaintDevice\fP (\fCQPrinter\fP) This function prints the contents of a \fBQwtPlot\fP instance to \fCQPaintDevice\fP object. The size is derived from its device metrics. 
.PP
\fBParameters:\fP
.RS 4
\fIpaintDev\fP device to paint on, often a printer 
.br
\fIpfilter\fP print filter 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBQwtPlot::print\fP 
.PP
\fBQwtPlotPrintFilter\fP 
.RE
.PP

.PP
Definition at line 43 of file qwt_plot_print.cpp.
.SS "void QwtPlot::print (QPainter * painter, const QRect & plotRect, const \fBQwtPlotPrintFilter\fP & pfilter = \fC\fBQwtPlotPrintFilter\fP()\fP) const\fC [virtual]\fP"
.PP
Paint the plot into a given rectangle. Paint the contents of a \fBQwtPlot\fP instance into a given rectangle. 
.PP
\fBParameters:\fP
.RS 4
\fIpainter\fP Painter 
.br
\fIplotRect\fP Bounding rectangle 
.br
\fIpfilter\fP Print filter 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBQwtPlotPrintFilter\fP 
.RE
.PP

.PP
Definition at line 73 of file qwt_plot_print.cpp.
.PP
References QwtPlotPrintFilter::apply(), axisEnabled(), axisScaleDiv(), axisScaleEngine(), axisWidget(), QwtPlotLayout::canvasMargin(), QwtPlotLayout::canvasRect(), QwtScaleWidget::endBorderDist(), QwtScaleDiv::hBound(), QwtLegend::isEmpty(), QwtScaleDiv::lBound(), legend(), margin(), QwtScaleWidget::margin(), QwtPainter::metricsMap(), QwtPlotPrintFilter::options(), plotLayout(), printCanvas(), printLegend(), printScale(), printTitle(), QwtPlotPrintFilter::reset(), QwtPainter::resetMetricsMap(), QwtPlotLayout::scaleRect(), QwtScaleWidget::setMargin(), QwtPainter::setMetricsMap(), QwtScaleMap::setPaintXInterval(), QwtScaleMap::setScaleInterval(), QwtScaleWidget::startBorderDist(), and titleLabel().
.SS "\fBQwtPlotLayout\fP * QwtPlot::plotLayout ()"
.PP
\fBReturns:\fP
.RS 4
the plot's title 
.RE
.PP

.PP
Definition at line 228 of file qwt_plot.cpp.
.PP
Referenced by canvasMap(), and print().
.SS "const \fBQwtPlotLayout\fP * QwtPlot::plotLayout () const"
.PP
\fBReturns:\fP
.RS 4
the plot's titel label. 
.RE
.PP

.PP
Definition at line 234 of file qwt_plot.cpp.
.SS "void QwtPlot::setMargin (int margin)"
.PP
Change the margin of the plot. The margin is the space around all components.
.PP
\fBParameters:\fP
.RS 4
\fImargin\fP new margin 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBQwtPlotLayout::setMargin()\fP, \fBmargin()\fP, \fBplotLayout()\fP 
.RE
.PP

.PP
Definition at line 665 of file qwt_plot.cpp.
.PP
References updateLayout().
.SS "int QwtPlot::margin () const"
.PP
\fBReturns:\fP
.RS 4
margin 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBsetMargin()\fP, \fBQwtPlotLayout::margin()\fP, \fBplotLayout()\fP 
.RE
.PP

.PP
Definition at line 681 of file qwt_plot.cpp.
.PP
Referenced by canvasMap(), and print().
.SS "void QwtPlot::setTitle (const QString & title)"
.PP
Change the plot's title 
.PP
\fBParameters:\fP
.RS 4
\fItitle\fP New title 
.RE
.PP

.PP
Definition at line 199 of file qwt_plot.cpp.
.PP
References updateLayout().
.PP
Referenced by applyProperties().
.SS "void QwtPlot::setTitle (const \fBQwtText\fP & title)"
.PP
Change the plot's title 
.PP
\fBParameters:\fP
.RS 4
\fItitle\fP New title 
.RE
.PP

.PP
Definition at line 212 of file qwt_plot.cpp.
.PP
References title(), and updateLayout().
.SS "\fBQwtText\fP QwtPlot::title () const"
.PP
\fBReturns:\fP
.RS 4
the plot's title 
.RE
.PP

.PP
Definition at line 222 of file qwt_plot.cpp.
.PP
Referenced by grabProperties(), QwtPlot(), setAxisTitle(), and setTitle().
.SS "\fBQwtTextLabel\fP * QwtPlot::titleLabel ()"
.PP
\fBReturns:\fP
.RS 4
the plot's titel label. 
.RE
.PP

.PP
Definition at line 240 of file qwt_plot.cpp.
.PP
Referenced by QwtPlotPrintFilter::apply(), print(), printTitle(), and QwtPlotPrintFilter::reset().
.SS "const \fBQwtTextLabel\fP * QwtPlot::titleLabel () const"
.PP
\fBReturns:\fP
.RS 4
the plot's titel label. 
.RE
.PP

.PP
Definition at line 248 of file qwt_plot.cpp.
.SS "\fBQwtPlotCanvas\fP * QwtPlot::canvas ()"
.PP
\fBReturns:\fP
.RS 4
the plot's canvas 
.RE
.PP

.PP
Definition at line 275 of file qwt_plot.cpp.
.PP
Referenced by canvasBackground(), canvasLineWidth(), QwtPlotCurve::draw(), QwtPlotLayout::minimumSizeHint(), printCanvas(), replot(), setCanvasBackground(), and setCanvasLineWidth().
.SS "const \fBQwtPlotCanvas\fP * QwtPlot::canvas () const"
.PP
\fBReturns:\fP
.RS 4
the plot's canvas 
.RE
.PP

.PP
Definition at line 283 of file qwt_plot.cpp.
.SS "void QwtPlot::setCanvasBackground (const QColor & c)"
.PP
Change the background of the plotting area. 
.PP
Sets c to QColorGroup::Background of all colorgroups of the palette of the canvas. Using \fBcanvas()\fP->setPalette() is a more powerful way to set these colors. 
.PP
\fBParameters:\fP
.RS 4
\fIc\fP new background color 
.RE
.PP

.PP
Definition at line 694 of file qwt_plot.cpp.
.PP
References canvas().
.PP
Referenced by QwtPlotPrintFilter::apply(), and QwtPlotPrintFilter::reset().
.SS "const QColor & QwtPlot::canvasBackground () const"
.PP
Nothing else than: \fBcanvas()\fP->palette().color( QPalette::Normal, QColorGroup::Background);
.PP
\fBReturns:\fP
.RS 4
the background color of the plotting area. 
.RE
.PP

.PP
Definition at line 716 of file qwt_plot.cpp.
.PP
References canvas().
.PP
Referenced by QwtPlotPrintFilter::apply().
.SS "void QwtPlot::setCanvasLineWidth (int w)"
.PP
Change the border width of the plotting area Nothing else than \fBcanvas()\fP->setLineWidth(w), left for compatibility only. 
.PP
\fBParameters:\fP
.RS 4
\fIw\fP new border width 
.RE
.PP

.PP
Definition at line 733 of file qwt_plot.cpp.
.PP
References canvas(), and updateLayout().
.SS "int QwtPlot::canvasLineWidth () const"
.PP
Nothing else than: \fBcanvas()\fP->lineWidth(), left for compatibility only. 
.PP
\fBReturns:\fP
.RS 4
the border width of the plotting area 
.RE
.PP

.PP
Definition at line 744 of file qwt_plot.cpp.
.PP
References canvas().
.SS "\fBQwtScaleMap\fP QwtPlot::canvasMap (int axisId) const\fC [virtual]\fP"
.PP
\fBParameters:\fP
.RS 4
\fIaxisId\fP Axis 
.RE
.PP
\fBReturns:\fP
.RS 4
Map for the axis on the canvas. With this map pixel coordinates can translated to plot coordinates and vice versa. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBQwtScaleMap\fP, \fBtransform()\fP, \fBinvTransform()\fP 
.RE
.PP

.PP
Definition at line 612 of file qwt_plot.cpp.
.PP
References axisEnabled(), axisScaleDiv(), axisScaleEngine(), axisWidget(), QwtPlotLayout::canvasMargin(), QwtScaleWidget::endBorderDist(), QwtScaleDiv::hBound(), QwtScaleDiv::lBound(), margin(), plotLayout(), QwtScaleMap::setPaintInterval(), QwtScaleMap::setScaleInterval(), QwtScaleMap::setTransformation(), and QwtScaleWidget::startBorderDist().
.PP
Referenced by QwtPlotCurve::closestPoint(), QwtPlotCurve::draw(), drawCanvas(), QwtPlotPicker::invTransform(), invTransform(), QwtPlotPanner::moveCanvas(), QwtPlotPicker::transform(), and transform().
.SS "double QwtPlot::invTransform (int axisId, int pos) const"
.PP
Transform the x or y coordinate of a position in the drawing region into a value. 
.PP
\fBParameters:\fP
.RS 4
\fIaxisId\fP axis index 
.br
\fIpos\fP position 
.RE
.PP
\fBWarning:\fP
.RS 4
The position can be an x or a y coordinate, depending on the specified axis. 
.RE
.PP

.PP
Definition at line 349 of file qwt_plot_axis.cpp.
.PP
References axisValid(), and canvasMap().
.SS "int QwtPlot::transform (int axisId, double value) const"
.PP
Transform a value into a coordinate in the plotting region. 
.PP
\fBParameters:\fP
.RS 4
\fIaxisId\fP axis index 
.br
\fIvalue\fP value 
.RE
.PP
\fBReturns:\fP
.RS 4
X or y coordinate in the plotting region corresponding to the value. 
.RE
.PP

.PP
Definition at line 365 of file qwt_plot_axis.cpp.
.PP
References axisValid(), and canvasMap().
.SS "\fBQwtScaleEngine\fP * QwtPlot::axisScaleEngine (int axisId)"
.PP
\fBReturns:\fP
.RS 4
Scale engine for a specific axis 
.RE
.PP

.PP
Definition at line 144 of file qwt_plot_axis.cpp.
.PP
References axisValid().
.PP
Referenced by canvasMap(), and print().
.SS "const \fBQwtScaleEngine\fP * QwtPlot::axisScaleEngine (int axisId) const"
.PP
\fBReturns:\fP
.RS 4
Scale engine for a specific axis 
.RE
.PP

.PP
Definition at line 153 of file qwt_plot_axis.cpp.
.PP
References axisValid().
.SS "void QwtPlot::setAxisScaleEngine (int axisId, \fBQwtScaleEngine\fP * scaleEngine)"
.PP
Change the scale engine for an axis
.PP
\fBParameters:\fP
.RS 4
\fIaxisId\fP axis index 
.br
\fIscaleEngine\fP Scale engine
.RE
.PP
\fBSee also:\fP
.RS 4
\fBaxisScaleEngine()\fP 
.RE
.PP

.PP
Definition at line 128 of file qwt_plot_axis.cpp.
.PP
References autoRefresh(), and axisValid().
.SS "void QwtPlot::setAxisAutoScale (int axisId)"
.PP
Enable autoscaling for a specified axis. 
.PP
This member function is used to switch back to autoscaling mode after a fixed scale has been set. Autoscaling is enabled by default.
.PP
\fBParameters:\fP
.RS 4
\fIaxisId\fP axis index 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBQwtPlot::setAxisScale()\fP, \fBQwtPlot::setAxisScaleDiv()\fP 
.RE
.PP

.PP
Definition at line 396 of file qwt_plot_axis.cpp.
.PP
References autoRefresh(), and axisValid().
.SS "bool QwtPlot::axisAutoScale (int axisId) const"
.PP
\fBReturns:\fP
.RS 4
\fCtrue\fP if autoscaling is enabled 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIaxisId\fP axis index 
.RE
.PP

.PP
Definition at line 164 of file qwt_plot_axis.cpp.
.PP
References axisValid().
.PP
Referenced by updateAxes().
.SS "void QwtPlot::enableAxis (int axisId, bool tf = \fCtrue\fP)"
.PP
Enable or disable a specified axis. 
.PP
When an axis is disabled, this only means that it is not visible on the screen. Curves, markers and can be attached to disabled axes, and transformation of screen coordinates into values works as normal.
.PP
Only xBottom and yLeft are enabled by default. 
.PP
\fBParameters:\fP
.RS 4
\fIaxisId\fP axis index 
.br
\fItf\fP \fCtrue\fP (enabled) or \fCfalse\fP (disabled) 
.RE
.PP

.PP
Definition at line 332 of file qwt_plot_axis.cpp.
.PP
References axisValid(), and updateLayout().
.SS "bool QwtPlot::axisEnabled (int axisId) const"
.PP
\fBReturns:\fP
.RS 4
\fCtrue\fP if a specified axis is enabled 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIaxisId\fP axis index 
.RE
.PP

.PP
Definition at line 177 of file qwt_plot_axis.cpp.
.PP
References axisValid().
.PP
Referenced by canvasMap(), QwtPlotLayout::minimumSizeHint(), print(), printScale(), QwtPlotPicker::QwtPlotPicker(), sizeHint(), and updateLayout().
.SS "void QwtPlot::setAxisFont (int axisId, const QFont & f)"
.PP
Change the font of an axis. 
.PP
\fBParameters:\fP
.RS 4
\fIaxisId\fP axis index 
.br
\fIf\fP font 
.RE
.PP
\fBWarning:\fP
.RS 4
This function changes the font of the tick labels, not of the axis title. 
.RE
.PP

.PP
Definition at line 381 of file qwt_plot_axis.cpp.
.PP
References axisValid(), and axisWidget().
.SS "QFont QwtPlot::axisFont (int axisId) const"
.PP
\fBReturns:\fP
.RS 4
the font of the scale labels for a specified axis 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIaxisId\fP axis index 
.RE
.PP

.PP
Definition at line 189 of file qwt_plot_axis.cpp.
.PP
References axisValid(), and axisWidget().
.SS "void QwtPlot::setAxisScale (int axisId, double min, double max, double stepSize = \fC0\fP)"
.PP
Disable autoscaling and specify a fixed scale for a selected axis. 
.PP
\fBParameters:\fP
.RS 4
\fIaxisId\fP axis index 
.br
\fImin\fP 
.br
\fImax\fP minimum and maximum of the scale 
.br
\fIstepSize\fP Major step size. If \fCstep == 0\fP, the step size is calculated automatically using the maxMajor setting. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBsetAxisMaxMajor()\fP, \fBsetAxisAutoScale()\fP 
.RE
.PP

.PP
Definition at line 414 of file qwt_plot_axis.cpp.
.PP
References autoRefresh(), and axisValid().
.PP
Referenced by QwtPlotPanner::moveCanvas(), QwtPlotZoomer::rescale(), and QwtPlotMagnifier::rescale().
.SS "void QwtPlot::setAxisScaleDiv (int axisId, const \fBQwtScaleDiv\fP & scaleDiv)"
.PP
Disable autoscaling and specify a fixed scale for a selected axis. 
.PP
\fBParameters:\fP
.RS 4
\fIaxisId\fP axis index 
.br
\fIscaleDiv\fP Scale division 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBsetAxisScale()\fP, \fBsetAxisAutoScale()\fP 
.RE
.PP

.PP
Definition at line 437 of file qwt_plot_axis.cpp.
.PP
References autoRefresh(), and axisValid().
.SS "void QwtPlot::setAxisScaleDraw (int axisId, \fBQwtScaleDraw\fP * scaleDraw)"
.PP
Set a scale draw. 
.PP
\fBParameters:\fP
.RS 4
\fIaxisId\fP axis index 
.br
\fIscaleDraw\fP object responsible for drawing scales.
.RE
.PP
By passing scaleDraw it is possible to extend \fBQwtScaleDraw\fP functionality and let it take place in \fBQwtPlot\fP. Please note that scaleDraw has to be created with new and will be deleted by the corresponding QwtScale member ( like a child object ).
.PP
\fBSee also:\fP
.RS 4
\fBQwtScaleDraw\fP, \fBQwtScaleWidget\fP 
.RE
.PP
\fBWarning:\fP
.RS 4
The attributes of scaleDraw will be overwritten by those of the previous \fBQwtScaleDraw\fP. 
.RE
.PP

.PP
Definition at line 465 of file qwt_plot_axis.cpp.
.PP
References autoRefresh(), axisValid(), axisWidget(), and QwtScaleWidget::setScaleDraw().
.SS "double QwtPlot::axisStepSize (int axisId) const"
.PP
Return the step size parameter, that has been set in setAxisScale. This doesn't need to be the step size of the current scale.
.PP
\fBParameters:\fP
.RS 4
\fIaxisId\fP axis index 
.RE
.PP
\fBReturns:\fP
.RS 4
step size parameter value
.RE
.PP
\fBSee also:\fP
.RS 4
\fBsetAxisScale\fP 
.RE
.PP

.PP
Definition at line 300 of file qwt_plot_axis.cpp.
.PP
References axisValid().
.SS "const \fBQwtScaleDiv\fP * QwtPlot::axisScaleDiv (int axisId) const"
.PP
Return the scale division of a specified axis. 
.PP
axisScaleDiv(axisId)->lBound(), axisScaleDiv(axisId)->hBound() are the current limits of the axis scale.
.PP
\fBParameters:\fP
.RS 4
\fIaxisId\fP axis index 
.RE
.PP
\fBReturns:\fP
.RS 4
Scale division
.RE
.PP
\fBSee also:\fP
.RS 4
\fBQwtScaleDiv\fP, \fBsetAxisScaleDiv\fP 
.RE
.PP

.PP
Definition at line 235 of file qwt_plot_axis.cpp.
.PP
References axisValid().
.PP
Referenced by canvasMap(), QwtPlotPanner::moveCanvas(), print(), QwtPlotZoomer::rescale(), QwtPlotMagnifier::rescale(), QwtPlotPicker::scaleRect(), QwtPlotScaleItem::setScaleDivFromAxis(), QwtPlotScaleItem::setScaleDraw(), and updateAxes().
.SS "\fBQwtScaleDiv\fP * QwtPlot::axisScaleDiv (int axisId)"
.PP
Return the scale division of a specified axis. 
.PP
axisScaleDiv(axisId)->lBound(), axisScaleDiv(axisId)->hBound() are the current limits of the axis scale.
.PP
\fBParameters:\fP
.RS 4
\fIaxisId\fP axis index 
.RE
.PP
\fBReturns:\fP
.RS 4
Scale division
.RE
.PP
\fBSee also:\fP
.RS 4
\fBQwtScaleDiv\fP, \fBsetAxisScaleDiv\fP 
.RE
.PP

.PP
Definition at line 254 of file qwt_plot_axis.cpp.
.PP
References axisValid().
.SS "const \fBQwtScaleDraw\fP * QwtPlot::axisScaleDraw (int axisId) const"
.PP
\fBReturns:\fP
.RS 4
the scale draw of a specified axis 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIaxisId\fP axis index 
.RE
.PP
\fBReturns:\fP
.RS 4
specified scaleDraw for axis, or NULL if axis is invalid. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBQwtScaleDraw\fP 
.RE
.PP

.PP
Definition at line 268 of file qwt_plot_axis.cpp.
.PP
References axisValid(), axisWidget(), and QwtScaleWidget::scaleDraw().
.SS "\fBQwtScaleDraw\fP * QwtPlot::axisScaleDraw (int axisId)"
.PP
\fBReturns:\fP
.RS 4
the scale draw of a specified axis 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIaxisId\fP axis index 
.RE
.PP
\fBReturns:\fP
.RS 4
specified scaleDraw for axis, or NULL if axis is invalid. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBQwtScaleDraw\fP 
.RE
.PP

.PP
Definition at line 282 of file qwt_plot_axis.cpp.
.PP
References axisValid(), axisWidget(), and QwtScaleWidget::scaleDraw().
.SS "const \fBQwtScaleWidget\fP * QwtPlot::axisWidget (int axisId) const"
.PP
\fBReturns:\fP
.RS 4
specified axis, or NULL if axisId is invalid. 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIaxisId\fP axis index 
.RE
.PP

.PP
Definition at line 100 of file qwt_plot_axis.cpp.
.PP
References axisValid().
.PP
Referenced by QwtPlotPrintFilter::apply(), axisFont(), axisScaleDraw(), axisTitle(), canvasMap(), QwtPlotLayout::minimumSizeHint(), print(), printScale(), QwtPlotPrintFilter::reset(), setAxisFont(), setAxisLabelRotation(), setAxisScaleDraw(), setAxisTitle(), sizeHint(), updateAxes(), and updateLayout().
.SS "\fBQwtScaleWidget\fP * QwtPlot::axisWidget (int axisId)"
.PP
\fBReturns:\fP
.RS 4
specified axis, or NULL if axisId is invalid. 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIaxisId\fP axis index 
.RE
.PP

.PP
Definition at line 112 of file qwt_plot_axis.cpp.
.PP
References axisValid().
.SS "void QwtPlot::setAxisLabelAlignment (int axisId, Qt::Alignment alignment)"
.PP
Change the alignment of the tick labels 
.PP
\fBParameters:\fP
.RS 4
\fIaxisId\fP axis index 
.br
\fIalignment\fP Or'd Qt::AlignmentFlags <see qnamespace.h> 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBQwtScaleDraw::setLabelAlignment()\fP 
.RE
.PP

.PP
Definition at line 483 of file qwt_plot_axis.cpp.
.SS "void QwtPlot::setAxisLabelRotation (int axisId, double rotation)"
.PP
Rotate all tick labels 
.PP
\fBParameters:\fP
.RS 4
\fIaxisId\fP axis index 
.br
\fIrotation\fP Angle in degrees. When changing the label rotation, the label alignment might be adjusted too. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBQwtScaleDraw::setLabelRotation()\fP, \fBQwtPlot::setAxisLabelAlignment\fP 
.RE
.PP

.PP
Definition at line 497 of file qwt_plot_axis.cpp.
.PP
References axisValid(), axisWidget(), and QwtScaleWidget::setLabelRotation().
.SS "void QwtPlot::setAxisTitle (int axisId, const QString & title)"
.PP
Change the title of a specified axis. 
.PP
\fBParameters:\fP
.RS 4
\fIaxisId\fP axis index 
.br
\fItitle\fP axis title 
.RE
.PP

.PP
Definition at line 561 of file qwt_plot_axis.cpp.
.PP
References axisValid(), axisWidget(), and QwtScaleWidget::setTitle().
.SS "void QwtPlot::setAxisTitle (int axisId, const \fBQwtText\fP & title)"
.PP
Change the title of a specified axis. 
.PP
\fBParameters:\fP
.RS 4
\fIaxisId\fP axis index 
.br
\fItitle\fP axis title 
.RE
.PP

.PP
Definition at line 572 of file qwt_plot_axis.cpp.
.PP
References axisValid(), axisWidget(), QwtScaleWidget::setTitle(), and title().
.SS "\fBQwtText\fP QwtPlot::axisTitle (int axisId) const"
.PP
\fBReturns:\fP
.RS 4
the title of a specified axis 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIaxisId\fP axis index 
.RE
.PP

.PP
Definition at line 312 of file qwt_plot_axis.cpp.
.PP
References axisValid(), axisWidget(), and QwtScaleWidget::title().
.SS "void QwtPlot::setAxisMaxMinor (int axisId, int maxMinor)"
.PP
Set the maximum number of minor scale intervals for a specified axis
.PP
\fBParameters:\fP
.RS 4
\fIaxisId\fP axis index 
.br
\fImaxMinor\fP maximum number of minor steps 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBaxisMaxMinor()\fP 
.RE
.PP

.PP
Definition at line 510 of file qwt_plot_axis.cpp.
.PP
References autoRefresh(), and axisValid().
.SS "int QwtPlot::axisMaxMajor (int axisId) const"
.PP
\fBReturns:\fP
.RS 4
the maximum number of major ticks for a specified axis 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIaxisId\fP axis index sa \fBsetAxisMaxMajor()\fP 
.RE
.PP

.PP
Definition at line 203 of file qwt_plot_axis.cpp.
.PP
References axisValid().
.SS "void QwtPlot::setAxisMaxMajor (int axisId, int maxMajor)"
.PP
Set the maximum number of major scale intervals for a specified axis
.PP
\fBParameters:\fP
.RS 4
\fIaxisId\fP axis index 
.br
\fImaxMajor\fP maximum number of major steps 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBaxisMaxMajor()\fP 
.RE
.PP

.PP
Definition at line 537 of file qwt_plot_axis.cpp.
.PP
References autoRefresh(), and axisValid().
.SS "int QwtPlot::axisMaxMinor (int axisId) const"
.PP
\fBReturns:\fP
.RS 4
the maximum number of minor ticks for a specified axis 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIaxisId\fP axis index sa \fBsetAxisMaxMinor()\fP 
.RE
.PP

.PP
Definition at line 216 of file qwt_plot_axis.cpp.
.PP
References axisValid().
.SS "void QwtPlot::insertLegend (\fBQwtLegend\fP * legend, \fBQwtPlot::LegendPosition\fP pos = \fCQwtPlot::RightLegend\fP, double ratio = \fC-1.0\fP)"
.PP
Insert a legend. 
.PP
If the position legend is \fCQwtPlot::LeftLegend\fP or \fCQwtPlot::RightLegend\fP the legend will be organized in one column from top to down. Otherwise the legend items will be placed in a table with a best fit number of columns from left to right.
.PP
If pos != QwtPlot::ExternalLegend the plot widget will become parent of the legend. It will be deleted when the plot is deleted, or another legend is set with \fBinsertLegend()\fP.
.PP
\fBParameters:\fP
.RS 4
\fIlegend\fP Legend 
.br
\fIpos\fP The legend's position. For top/left position the number of colums will be limited to 1, otherwise it will be set to unlimited.
.br
\fIratio\fP Ratio between legend and the bounding rect of title, canvas and axes. The legend will be shrinked if it would need more space than the given ratio. The ratio is limited to ]0.0 .. 1.0]. In case of <= 0.0 it will be reset to the default ratio. The default vertical/horizontal ratio is 0.33/0.5.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBlegend()\fP, \fBQwtPlotLayout::legendPosition()\fP, \fBQwtPlotLayout::setLegendPosition()\fP 
.RE
.PP

.PP
Definition at line 822 of file qwt_plot.cpp.
.PP
References QwtPlotDict::itemList(), legend(), updateLayout(), and updateTabOrder().
.SS "\fBQwtLegend\fP * QwtPlot::legend ()"
.PP
\fBReturns:\fP
.RS 4
the plot's legend 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBinsertLegend()\fP 
.RE
.PP

.PP
Definition at line 257 of file qwt_plot.cpp.
.PP
Referenced by QwtPlotLayout::activate(), QwtPlotPrintFilter::apply(), insertLegend(), print(), printLegend(), and QwtPlotPrintFilter::reset().
.SS "const \fBQwtLegend\fP * QwtPlot::legend () const"
.PP
\fBReturns:\fP
.RS 4
the plot's legend 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBinsertLegend()\fP 
.RE
.PP

.PP
Definition at line 266 of file qwt_plot.cpp.
.SS "void QwtPlot::polish ()\fC [virtual]\fP"
.PP
Polish. 
.PP
Definition at line 289 of file qwt_plot.cpp.
.PP
References replot().
.PP
Referenced by event().
.SS "QSize QwtPlot::sizeHint () const\fC [virtual]\fP"
.PP
Return sizeHint 
.PP
\fBSee also:\fP
.RS 4
\fBminimumSizeHint()\fP 
.RE
.PP

.PP
Definition at line 303 of file qwt_plot.cpp.
.PP
References axisEnabled(), axisWidget(), minimumSizeHint(), QwtScaleWidget::minimumSizeHint(), QwtAbstractScaleDraw::scaleDiv(), QwtScaleWidget::scaleDraw(), and QwtScaleDiv::ticks().
.SS "QSize QwtPlot::minimumSizeHint () const\fC [virtual]\fP"
.PP
Return a minimum size hint. 
.PP
Definition at line 338 of file qwt_plot.cpp.
.PP
Referenced by sizeHint().
.SS "void QwtPlot::updateLayout ()\fC [virtual]\fP"
.PP
Adjust plot content to its current size. 
.PP
\fBSee also:\fP
.RS 4
\fBresizeEvent()\fP 
.RE
.PP

.PP
Definition at line 413 of file qwt_plot.cpp.
.PP
References axisEnabled(), and axisWidget().
.PP
Referenced by enableAxis(), event(), insertLegend(), resizeEvent(), setCanvasLineWidth(), setMargin(), and setTitle().
.SS "bool QwtPlot::event (QEvent *)\fC [virtual]\fP"
.PP
Adds handling of layout requests. 
.PP
Definition at line 140 of file qwt_plot.cpp.
.PP
References polish(), and updateLayout().
.SS "void QwtPlot::legendClicked (\fBQwtPlotItem\fP * plotItem)\fC [signal]\fP"
.PP
A signal which is emitted when the user has clicked on a legend item, which is in QwtLegend::ClickableItem mode.
.PP
\fBParameters:\fP
.RS 4
\fIplotItem\fP Corresponding plot item of the selected legend item
.RE
.PP
\fBNote:\fP
.RS 4
clicks are disabled as default 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBQwtLegend::setItemMode\fP, \fBQwtLegend::itemMode\fP 
.RE
.PP

.PP
Referenced by legendItemClicked().
.SS "void QwtPlot::legendChecked (\fBQwtPlotItem\fP * plotItem, bool on)\fC [signal]\fP"
.PP
A signal which is emitted when the user has clicked on a legend item, which is in QwtLegend::CheckableItem mode
.PP
\fBParameters:\fP
.RS 4
\fIplotItem\fP Corresponding plot item of the selected legend item 
.br
\fIon\fP True when the legen item is checked
.RE
.PP
\fBNote:\fP
.RS 4
clicks are disabled as default 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBQwtLegend::setItemMode\fP, \fBQwtLegend::itemMode\fP 
.RE
.PP

.PP
Referenced by legendItemChecked().
.SS "void QwtPlot::clear ()\fC [virtual, slot]\fP"
.PP
Remove all curves and markers. 
.PP
Definition at line 789 of file qwt_plot.cpp.
.PP
References QwtPlotDict::detachItems().
.SS "void QwtPlot::replot ()\fC [virtual, slot]\fP"
.PP
Redraw the plot. 
.PP
If the autoReplot option is not set (which is the default) or if any curves are attached to raw data, the plot has to be refreshed explicitly in order to make changes visible.
.PP
\fBSee also:\fP
.RS 4
\fBsetAutoReplot()\fP 
.RE
.PP
\fBWarning:\fP
.RS 4
Calls \fBcanvas()\fP->repaint, take care of infinite recursions 
.RE
.PP

.PP
Definition at line 363 of file qwt_plot.cpp.
.PP
References autoReplot(), canvas(), QwtPlotCanvas::invalidatePaintCache(), setAutoReplot(), QwtPlotCanvas::testPaintAttribute(), and updateAxes().
.PP
Referenced by applyProperties(), autoRefresh(), QwtPlotPanner::moveCanvas(), polish(), QwtPlotZoomer::rescale(), QwtPlotMagnifier::rescale(), and QwtPlotZoomer::setZoomBase().
.SS "void QwtPlot::autoRefresh ()\fC [slot]\fP"
.PP
Replots the plot if \fBQwtPlot::autoReplot()\fP is \fCtrue\fP. 
.PP
Definition at line 163 of file qwt_plot.cpp.
.PP
References replot().
.PP
Referenced by setAxisAutoScale(), setAxisMaxMajor(), setAxisMaxMinor(), setAxisScale(), setAxisScaleDiv(), setAxisScaleDraw(), and setAxisScaleEngine().
.SS "void QwtPlot::legendItemClicked ()\fC [protected, virtual, slot]\fP"
.PP
Called internally when the legend has been clicked on. Emits a \fBlegendClicked()\fP signal. 
.PP
Definition at line 762 of file qwt_plot.cpp.
.PP
References legendClicked().
.SS "void QwtPlot::legendItemChecked (bool on)\fC [protected, virtual, slot]\fP"
.PP
Called internally when the legend has been checked Emits a \fBlegendClicked()\fP signal. 
.PP
Definition at line 777 of file qwt_plot.cpp.
.PP
References legendChecked().
.SS "bool QwtPlot::axisValid (int axisId)\fC [static, protected]\fP"
.PP
\fBReturns:\fP
.RS 4
\fCtrue\fP if the specified axis exists, otherwise \fCfalse\fP 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIaxisId\fP axis index 
.RE
.PP

.PP
Definition at line 753 of file qwt_plot.cpp.
.PP
Referenced by axisAutoScale(), axisEnabled(), axisFont(), axisMaxMajor(), axisMaxMinor(), axisScaleDiv(), axisScaleDraw(), axisScaleEngine(), axisStepSize(), axisTitle(), axisWidget(), enableAxis(), invTransform(), setAxisAutoScale(), setAxisFont(), setAxisLabelRotation(), setAxisMaxMajor(), setAxisMaxMinor(), setAxisScale(), setAxisScaleDiv(), setAxisScaleDraw(), setAxisScaleEngine(), setAxisTitle(), and transform().
.SS "void QwtPlot::drawCanvas (QPainter * painter)\fC [protected, virtual]\fP"
.PP
Redraw the canvas. 
.PP
\fBParameters:\fP
.RS 4
\fIpainter\fP Painter used for drawing
.RE
.PP
\fBWarning:\fP
.RS 4
drawCanvas calls drawItems what is also used for printing. Applications that like to add individual plot items better overload \fBdrawItems()\fP 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBdrawItems()\fP 
.RE
.PP

.PP
Definition at line 554 of file qwt_plot.cpp.
.PP
References canvasMap(), and drawItems().
.SS "void QwtPlot::drawItems (QPainter * painter, const QRect & rect, const \fBQwtScaleMap\fP map[axisCnt], const \fBQwtPlotPrintFilter\fP & pfilter) const\fC [protected, virtual]\fP"
.PP
Redraw the canvas items. 
.PP
\fBParameters:\fP
.RS 4
\fIpainter\fP Painter used for drawing 
.br
\fIrect\fP Bounding rectangle where to paint 
.br
\fImap\fP QwtPlot::axisCnt maps, mapping between plot and paint device coordinates 
.br
\fIpfilter\fP Plot print filter 
.RE
.PP

.PP
Definition at line 572 of file qwt_plot.cpp.
.PP
References QwtPlotDict::itemList(), and QwtPlotPrintFilter::options().
.PP
Referenced by drawCanvas(), and printCanvas().
.SS "void QwtPlot::updateTabOrder ()\fC [protected, virtual]\fP"
.PP
Update the focus tab order
.PP
The order is changed so that the canvas will be in front of the first legend item, or behind the last legend item - depending on the position of the legend. 
.PP
Definition at line 477 of file qwt_plot.cpp.
.PP
Referenced by insertLegend().
.SS "void QwtPlot::updateAxes ()\fC [protected]\fP"
.PP
Rebuild the scales. 
.PP
Definition at line 579 of file qwt_plot_axis.cpp.
.PP
References axisAutoScale(), axisScaleDiv(), axisWidget(), QwtScaleWidget::getBorderDistHint(), QwtDoubleInterval::isValid(), QwtPlotDict::itemList(), QwtDoubleInterval::maxValue(), QwtDoubleInterval::minValue(), QwtScaleWidget::setBorderDist(), and QwtScaleWidget::setScaleDiv().
.PP
Referenced by replot().
.SS "void QwtPlot::resizeEvent (QResizeEvent * e)\fC [protected, virtual]\fP"
.PP
Resize and update internal layout. 
.PP
Definition at line 347 of file qwt_plot.cpp.
.PP
References updateLayout().
.SS "void QwtPlot::printLegendItem (QPainter * painter, const QWidget * w, const QRect & rect) const\fC [protected, virtual]\fP"
.PP
Print the legend item into a given rectangle.
.PP
\fBParameters:\fP
.RS 4
\fIpainter\fP Painter 
.br
\fIw\fP Widget representing a legend item 
.br
\fIrect\fP Bounding rectangle 
.RE
.PP

.PP
Definition at line 335 of file qwt_plot_print.cpp.
.PP
Referenced by printLegend().
.SS "void QwtPlot::printTitle (QPainter * painter, const QRect & rect) const\fC [protected, virtual]\fP"
.PP
Print the title into a given rectangle.
.PP
\fBParameters:\fP
.RS 4
\fIpainter\fP Painter 
.br
\fIrect\fP Bounding rectangle 
.RE
.PP

.PP
Definition at line 256 of file qwt_plot_print.cpp.
.PP
References QwtText::draw(), QwtTextLabel::text(), and titleLabel().
.PP
Referenced by print().
.SS "void QwtPlot::printScale (QPainter * painter, int axisId, int startDist, int endDist, int baseDist, const QRect & rect) const\fC [protected, virtual]\fP"
.PP
Paint a scale into a given rectangle. Paint the scale into a given rectangle. 
.PP
\fBParameters:\fP
.RS 4
\fIpainter\fP Painter 
.br
\fIaxisId\fP Axis 
.br
\fIstartDist\fP Start border distance 
.br
\fIendDist\fP End border distance 
.br
\fIbaseDist\fP Base distance 
.br
\fIrect\fP Bounding rectangle 
.RE
.PP

.PP
Definition at line 359 of file qwt_plot_print.cpp.
.PP
References axisEnabled(), axisWidget(), QwtScaleWidget::colorBarRect(), QwtScaleWidget::colorBarWidth(), QwtAbstractScaleDraw::draw(), QwtScaleWidget::drawColorBar(), QwtScaleWidget::drawTitle(), QwtScaleWidget::isColorBarEnabled(), QwtMetricsMap::layoutToScreen(), QwtScaleDraw::length(), QwtPainter::metricsMap(), QwtScaleDraw::move(), QwtScaleDraw::orientation(), QwtScaleWidget::penWidth(), QwtScaleDraw::pos(), QwtScaleWidget::scaleDraw(), QwtScaleDraw::setLength(), and QwtScaleWidget::spacing().
.PP
Referenced by print().
.SS "void QwtPlot::printCanvas (QPainter * painter, const QRect & boundingRect, const QRect & canvasRect, const \fBQwtScaleMap\fP map[axisCnt], const \fBQwtPlotPrintFilter\fP & pfilter) const\fC [protected, virtual]\fP"
.PP
Print the canvas into a given rectangle.
.PP
\fBParameters:\fP
.RS 4
\fIpainter\fP Painter 
.br
\fImap\fP Maps mapping between plot and paint device coordinates 
.br
\fIboundingRect\fP Bounding rectangle 
.br
\fIcanvasRect\fP Canvas rectangle 
.br
\fIpfilter\fP Print filter 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBQwtPlotPrintFilter\fP 
.RE
.PP

.PP
Definition at line 467 of file qwt_plot_print.cpp.
.PP
References canvas(), drawItems(), QwtPainter::drawRect(), QwtPainter::fillRect(), QwtPlotPrintFilter::options(), and QwtPainter::setClipRect().
.PP
Referenced by print().
.SS "void QwtPlot::printLegend (QPainter * painter, const QRect & rect) const\fC [protected, virtual]\fP"
.PP
Print the legend into a given rectangle.
.PP
\fBParameters:\fP
.RS 4
\fIpainter\fP Painter 
.br
\fIrect\fP Bounding rectangle 
.RE
.PP

.PP
Definition at line 280 of file qwt_plot_print.cpp.
.PP
References QwtDynGridLayout::columnsForWidth(), QwtLegend::contentsWidget(), QwtDynGridLayout::count(), QwtDynGridLayout::itemAt(), QwtDynGridLayout::layoutItems(), legend(), printLegendItem(), and QwtPainter::setClipRect().
.PP
Referenced by print().

.SH "Author"
.PP 
Generated automatically by Doxygen for Qwt User's Guide from the source code.
