.TH "QwtRoundScaleDraw" 3 "24 May 2008" "Version 5.1.1" "Qwt User's Guide" \" -*- nroff -*-
.ad l
.nh
.SH NAME
QwtRoundScaleDraw \- 
.SH SYNOPSIS
.br
.PP
Inherits \fBQwtAbstractScaleDraw\fP.
.PP
Inherited by \fBQwtDialScaleDraw\fP.
.PP
.SH "Detailed Description"
.PP 
A class for drawing round scales. 

\fBQwtRoundScaleDraw\fP can be used to draw round scales. The circle segment can be adjusted by \fBQwtRoundScaleDraw::setAngleRange()\fP. The geometry of the scale can be specified with \fBQwtRoundScaleDraw::moveCenter()\fP and \fBQwtRoundScaleDraw::setRadius()\fP.
.PP
After a scale division has been specified as a \fBQwtScaleDiv\fP object using \fBQwtAbstractScaleDraw::setScaleDiv(const QwtScaleDiv &s)\fP, the scale can be drawn with the \fBQwtAbstractScaleDraw::draw()\fP member. 
.PP
Definition at line 32 of file qwt_round_scale_draw.h.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBQwtRoundScaleDraw\fP ()"
.br
.ti -1c
.RI "\fBQwtRoundScaleDraw\fP (const \fBQwtRoundScaleDraw\fP &)"
.br
.ti -1c
.RI "virtual \fB~QwtRoundScaleDraw\fP ()"
.br
.ti -1c
.RI "\fBQwtRoundScaleDraw\fP & \fBoperator=\fP (const \fBQwtRoundScaleDraw\fP &other)"
.br
.ti -1c
.RI "void \fBsetRadius\fP (int radius)"
.br
.ti -1c
.RI "int \fBradius\fP () const"
.br
.ti -1c
.RI "void \fBmoveCenter\fP (int x, int y)"
.br
.ti -1c
.RI "void \fBmoveCenter\fP (const QPoint &)"
.br
.ti -1c
.RI "QPoint \fBcenter\fP () const"
.br
.ti -1c
.RI "void \fBsetAngleRange\fP (double angle1, double angle2)"
.br
.ti -1c
.RI "virtual int \fBextent\fP (const QPen &, const QFont &) const"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual void \fBdrawTick\fP (QPainter *p, double val, int len) const"
.br
.ti -1c
.RI "virtual void \fBdrawBackbone\fP (QPainter *p) const "
.br
.ti -1c
.RI "virtual void \fBdrawLabel\fP (QPainter *p, double val) const"
.br
.in -1c
.SH "Constructor & Destructor Documentation"
.PP 
.SS "QwtRoundScaleDraw::QwtRoundScaleDraw ()"
.PP
Constructor. 
.PP
The range of the scale is initialized to [0, 100], The center is set to (50, 50) with a radius of 50. The angle range is set to [-135, 135]. 
.PP
Definition at line 46 of file qwt_round_scale_draw.cpp.
.PP
References QwtAbstractScaleDraw::scaleMap(), QwtScaleMap::setPaintInterval(), and setRadius().
.SS "QwtRoundScaleDraw::QwtRoundScaleDraw (const \fBQwtRoundScaleDraw\fP &)"
.PP
Copy constructor. 
.PP
Definition at line 55 of file qwt_round_scale_draw.cpp.
.PP
References d_data.
.SS "QwtRoundScaleDraw::~QwtRoundScaleDraw ()\fC [virtual]\fP"
.PP
Destructor. 
.PP
Definition at line 63 of file qwt_round_scale_draw.cpp.
.SH "Member Function Documentation"
.PP 
.SS "\fBQwtRoundScaleDraw\fP & QwtRoundScaleDraw::operator= (const \fBQwtRoundScaleDraw\fP & other)"
.PP
Assignment operator. 
.PP
Definition at line 69 of file qwt_round_scale_draw.cpp.
.PP
References d_data.
.SS "void QwtRoundScaleDraw::setRadius (int radius)"
.PP
Change of radius the scale
.PP
Radius is the radius of the backbone without ticks and labels.
.PP
\fBParameters:\fP
.RS 4
\fIradius\fP New Radius 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBmoveCenter\fP 
.RE
.PP

.PP
Definition at line 84 of file qwt_round_scale_draw.cpp.
.PP
Referenced by QwtRoundScaleDraw().
.SS "int QwtRoundScaleDraw::radius () const"
.PP
Get the radius
.PP
Radius is the radius of the backbone without ticks and labels.
.PP
\fBSee also:\fP
.RS 4
\fBsetRadius()\fP, \fBextent()\fP 
.RE
.PP

.PP
Definition at line 96 of file qwt_round_scale_draw.cpp.
.PP
Referenced by drawBackbone(), drawLabel(), and drawTick().
.SS "void QwtRoundScaleDraw::moveCenter (const QPoint & center)"
.PP
Move the center of the scale draw, leaving the radius unchanged
.PP
\fBParameters:\fP
.RS 4
\fIcenter\fP New center 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBsetRadius\fP 
.RE
.PP

.PP
Definition at line 107 of file qwt_round_scale_draw.cpp.
.SS "QPoint QwtRoundScaleDraw::center () const"
.PP
Get the center of the scale. 
.PP
Definition at line 113 of file qwt_round_scale_draw.cpp.
.SS "void QwtRoundScaleDraw::setAngleRange (double angle1, double angle2)"
.PP
Adjust the baseline circle segment for round scales. 
.PP
The baseline will be drawn from min(angle1,angle2) to max(angle1, angle2). The default setting is [ -135, 135 ]. An angle of 0 degrees corresponds to the 12 o'clock position, and positive angles count in a clockwise direction. 
.PP
\fBParameters:\fP
.RS 4
\fIangle1\fP 
.br
\fIangle2\fP boundaries of the angle interval in degrees. 
.RE
.PP
\fBWarning:\fP
.RS 4
.PD 0
.IP "\(bu" 2
The angle range is limited to [-360, 360] degrees. Angles exceeding this range will be clipped. 
.IP "\(bu" 2
For angles more than 359 degrees above or below min(angle1, angle2), scale marks will not be drawn. 
.IP "\(bu" 2
If you need a counterclockwise scale, use QwtScaleDiv::setRange 
.PP
.RE
.PP

.PP
Definition at line 135 of file qwt_round_scale_draw.cpp.
.PP
References QwtAbstractScaleDraw::scaleMap(), and QwtScaleMap::setPaintInterval().
.PP
Referenced by QwtKnob::setTotalAngle().
.SS "int QwtRoundScaleDraw::extent (const QPen & pen, const QFont & font) const\fC [virtual]\fP"
.PP
Calculate the extent of the scale
.PP
The extent is the distcance between the baseline to the outermost pixel of the scale draw. \fBradius()\fP + \fBextent()\fP is an upper limit for the radius of the bounding circle.
.PP
\fBParameters:\fP
.RS 4
\fIpen\fP Pen that is used for painting backbone and ticks 
.br
\fIfont\fP Font used for painting the labels
.RE
.PP
\fBSee also:\fP
.RS 4
\fBsetMinimumExtent()\fP, \fBminimumExtent()\fP 
.RE
.PP
\fBWarning:\fP
.RS 4
The implemented algo is not too smart and calculates only an upper limit, that might be a few pixels too large 
.RE
.PP

.PP
Implements \fBQwtAbstractScaleDraw\fP.
.PP
Definition at line 267 of file qwt_round_scale_draw.cpp.
.PP
References QwtScaleDiv::contains(), QwtAbstractScaleDraw::hasComponent(), QwtText::isEmpty(), QwtAbstractScaleDraw::label(), QwtAbstractScaleDraw::majTickLength(), QwtAbstractScaleDraw::map(), QwtAbstractScaleDraw::minimumExtent(), QwtAbstractScaleDraw::scaleDiv(), QwtAbstractScaleDraw::spacing(), QwtText::textSize(), QwtAbstractScaleDraw::tickLabel(), QwtScaleDiv::ticks(), and QwtScaleMap::transform().
.PP
Referenced by QwtKnob::minimumSizeHint().
.SS "void QwtRoundScaleDraw::drawTick (QPainter * painter, double value, int len) const\fC [protected, virtual]\fP"
.PP
Draw a tick
.PP
\fBParameters:\fP
.RS 4
\fIpainter\fP Painter 
.br
\fIvalue\fP Value of the tick 
.br
\fIlen\fP Lenght of the tick
.RE
.PP
\fBSee also:\fP
.RS 4
\fBdrawBackbone()\fP, \fBdrawLabel()\fP 
.RE
.PP

.PP
Implements \fBQwtAbstractScaleDraw\fP.
.PP
Definition at line 205 of file qwt_round_scale_draw.cpp.
.PP
References QwtPainter::drawLine(), QwtAbstractScaleDraw::map(), radius(), and QwtScaleMap::transform().
.SS "void QwtRoundScaleDraw::drawBackbone (QPainter * painter) const\fC [protected, virtual]\fP"
.PP
Draws the baseline of the scale 
.PP
\fBParameters:\fP
.RS 4
\fIpainter\fP Painter
.RE
.PP
\fBSee also:\fP
.RS 4
\fBdrawTick()\fP, \fBdrawLabel()\fP 
.RE
.PP

.PP
Implements \fBQwtAbstractScaleDraw\fP.
.PP
Definition at line 239 of file qwt_round_scale_draw.cpp.
.PP
References QwtAbstractScaleDraw::map(), and radius().
.SS "void QwtRoundScaleDraw::drawLabel (QPainter * painter, double value) const\fC [protected, virtual]\fP"
.PP
Draws the label for a major scale tick
.PP
\fBParameters:\fP
.RS 4
\fIpainter\fP Painter 
.br
\fIvalue\fP Value
.RE
.PP
\fBSee also:\fP
.RS 4
\fBdrawTick()\fP, \fBdrawBackbone()\fP 
.RE
.PP

.PP
Implements \fBQwtAbstractScaleDraw\fP.
.PP
Definition at line 160 of file qwt_round_scale_draw.cpp.
.PP
References QwtText::draw(), QwtAbstractScaleDraw::hasComponent(), QwtText::isEmpty(), QwtAbstractScaleDraw::label(), QwtAbstractScaleDraw::majTickLength(), QwtAbstractScaleDraw::map(), radius(), QwtAbstractScaleDraw::spacing(), QwtText::textSize(), QwtAbstractScaleDraw::tickLabel(), and QwtScaleMap::transform().

.SH "Author"
.PP 
Generated automatically by Doxygen for Qwt User's Guide from the source code.
