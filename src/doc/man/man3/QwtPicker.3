.TH "QwtPicker" 3 "24 May 2008" "Version 5.1.1" "Qwt User's Guide" \" -*- nroff -*-
.ad l
.nh
.SH NAME
QwtPicker \- 
.SH SYNOPSIS
.br
.PP
Inherits \fBQwtEventPattern\fP.
.PP
Inherited by \fBQwtPlotPicker\fP.
.PP
.SH "Detailed Description"
.PP 
\fBQwtPicker\fP provides selections on a widget. 

\fBQwtPicker\fP filters all mouse and keyboard events of a widget and translates them into an array of selected points. Depending on the \fBQwtPicker::SelectionType\fP the selection might be a single point, a rectangle or a polygon. The selection process is supported by optional rubberbands (rubberband selection) and position trackers.
.PP
\fBQwtPicker\fP is useful for widgets where the event handlers can't be overloaded, like for components of composite widgets. It offers alternative handlers for mouse and key events.
.PP
\fBExample \fP.RS 4

.PP
.nf
#include <qwt_picker.h>

QwtPicker *picker = new QwtPicker(widget);
picker->setTrackerMode(QwtPicker::ActiveOnly);
connect(picker, SIGNAL(selected(const QwtPolygon &)), ...);

// emit the position of clicks on widget
picker->setSelectionFlags(QwtPicker::PointSelection | QwtPicker::ClickSelection);

    ...
    
// now select rectangles
picker->setSelectionFlags(QwtPicker::RectSelection | QwtPicker::DragSelection);
picker->setRubberBand(QwtPicker::RectRubberBand); 
.fi
.PP

.br
.RE
.PP
The selection process uses the commands \fBbegin()\fP, \fBappend()\fP, \fBmove()\fP and \fBend()\fP. \fBappend()\fP adds a new point to the selection, \fBmove()\fP changes the position of the latest point.
.PP
The commands are initiated from a small state machine (\fBQwtPickerMachine\fP) that translates mouse and key events. There are a couple of predefined state machines for point, rect and polygon selections. The \fBselectionFlags()\fP control which one should be used. It is possible to use other machines by overloading \fBstateMachine()\fP.
.PP
The picker is active (\fBisActive()\fP), between \fBbegin()\fP and \fBend()\fP. In active state the rubberband is displayed, and the tracker is visible in case of trackerMode is ActiveOnly or AlwaysOn.
.PP
The cursor can be moved using the arrow keys. All selections can be aborted using the abort key. (\fBQwtEventPattern::KeyPatternCode\fP)
.PP
\fBWarning:\fP
.RS 4
In case of QWidget::NoFocus the focus policy of the observed widget is set to QWidget::WheelFocus and mouse tracking will be manipulated for ClickSelection while the picker is active, or if \fBtrackerMode()\fP is AlwayOn. 
.RE
.PP

.PP
Definition at line 80 of file qwt_picker.h.
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBSelectionType\fP { \fBNoSelection\fP =  0, \fBPointSelection\fP =  1, \fBRectSelection\fP =  2, \fBPolygonSelection\fP =  4 }"
.br
.ti -1c
.RI "enum \fBRectSelectionType\fP { \fBCornerToCorner\fP =  64, \fBCenterToCorner\fP =  128, \fBCenterToRadius\fP =  256 }"
.br
.ti -1c
.RI "enum \fBSelectionMode\fP { \fBClickSelection\fP =  1024, \fBDragSelection\fP =  2048 }"
.br
.ti -1c
.RI "enum \fBRubberBand\fP { \fBNoRubberBand\fP =  0, \fBHLineRubberBand\fP, \fBVLineRubberBand\fP, \fBCrossRubberBand\fP, \fBRectRubberBand\fP, \fBEllipseRubberBand\fP, \fBPolygonRubberBand\fP, \fBUserRubberBand\fP =  100 }"
.br
.ti -1c
.RI "enum \fBDisplayMode\fP { \fBAlwaysOff\fP, \fBAlwaysOn\fP, \fBActiveOnly\fP, \fBImageMode\fP =  1, \fBContourMode\fP =  2 }"
.br
.ti -1c
.RI "enum \fBResizeMode\fP { \fBStretch\fP, \fBKeepSize\fP }"
.br
.in -1c
.SS "Signals"

.in +1c
.ti -1c
.RI "void \fBselected\fP (const QwtPolygon &pa)"
.br
.ti -1c
.RI "void \fBappended\fP (const QPoint &pos)"
.br
.ti -1c
.RI "void \fBmoved\fP (const QPoint &pos)"
.br
.ti -1c
.RI "void \fBchanged\fP (const QwtPolygon &pa)"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBQwtPicker\fP (QWidget *parent)"
.br
.ti -1c
.RI "\fBQwtPicker\fP (int selectionFlags, \fBRubberBand\fP rubberBand, \fBDisplayMode\fP trackerMode, QWidget *)"
.br
.ti -1c
.RI "virtual \fB~QwtPicker\fP ()"
.br
.ti -1c
.RI "virtual void \fBsetSelectionFlags\fP (int)"
.br
.ti -1c
.RI "int \fBselectionFlags\fP () const"
.br
.ti -1c
.RI "virtual void \fBsetRubberBand\fP (\fBRubberBand\fP)"
.br
.ti -1c
.RI "\fBRubberBand\fP \fBrubberBand\fP () const"
.br
.ti -1c
.RI "virtual void \fBsetTrackerMode\fP (\fBDisplayMode\fP)"
.br
.ti -1c
.RI "\fBDisplayMode\fP \fBtrackerMode\fP () const"
.br
.ti -1c
.RI "virtual void \fBsetResizeMode\fP (\fBResizeMode\fP)"
.br
.ti -1c
.RI "\fBResizeMode\fP \fBresizeMode\fP () const"
.br
.ti -1c
.RI "virtual void \fBsetRubberBandPen\fP (const QPen &)"
.br
.ti -1c
.RI "QPen \fBrubberBandPen\fP () const"
.br
.ti -1c
.RI "virtual void \fBsetTrackerPen\fP (const QPen &)"
.br
.ti -1c
.RI "QPen \fBtrackerPen\fP () const"
.br
.ti -1c
.RI "virtual void \fBsetTrackerFont\fP (const QFont &)"
.br
.ti -1c
.RI "QFont \fBtrackerFont\fP () const"
.br
.ti -1c
.RI "bool \fBisEnabled\fP () const"
.br
.ti -1c
.RI "virtual void \fBsetEnabled\fP (bool)"
.br
.ti -1c
.RI "bool \fBisActive\fP () const"
.br
.ti -1c
.RI "virtual bool \fBeventFilter\fP (QObject *, QEvent *)"
.br
.ti -1c
.RI "QWidget * \fBparentWidget\fP ()"
.br
.ti -1c
.RI "const QWidget * \fBparentWidget\fP () const"
.br
.ti -1c
.RI "virtual QRect \fBpickRect\fP () const"
.br
.ti -1c
.RI "const QwtPolygon & \fBselection\fP () const"
.br
.ti -1c
.RI "virtual void \fBdrawRubberBand\fP (QPainter *) const"
.br
.ti -1c
.RI "virtual void \fBdrawTracker\fP (QPainter *) const"
.br
.ti -1c
.RI "virtual \fBQwtText\fP \fBtrackerText\fP (const QPoint &pos) const"
.br
.ti -1c
.RI "QPoint \fBtrackerPosition\fP () const"
.br
.ti -1c
.RI "QRect \fBtrackerRect\fP (const QFont &) const "
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual bool \fBaccept\fP (QwtPolygon &selection) const"
.br
.ti -1c
.RI "virtual void \fBtransition\fP (const QEvent *)"
.br
.ti -1c
.RI "virtual void \fBbegin\fP ()"
.br
.ti -1c
.RI "virtual void \fBappend\fP (const QPoint &)"
.br
.ti -1c
.RI "virtual void \fBmove\fP (const QPoint &)"
.br
.ti -1c
.RI "virtual bool \fBend\fP (bool ok=true)"
.br
.ti -1c
.RI "virtual void \fBreset\fP ()"
.br
.ti -1c
.RI "virtual void \fBwidgetMousePressEvent\fP (QMouseEvent *)"
.br
.ti -1c
.RI "virtual void \fBwidgetMouseReleaseEvent\fP (QMouseEvent *)"
.br
.ti -1c
.RI "virtual void \fBwidgetMouseDoubleClickEvent\fP (QMouseEvent *)"
.br
.ti -1c
.RI "virtual void \fBwidgetMouseMoveEvent\fP (QMouseEvent *)"
.br
.ti -1c
.RI "virtual void \fBwidgetWheelEvent\fP (QWheelEvent *)"
.br
.ti -1c
.RI "virtual void \fBwidgetKeyPressEvent\fP (QKeyEvent *)"
.br
.ti -1c
.RI "virtual void \fBwidgetKeyReleaseEvent\fP (QKeyEvent *)"
.br
.ti -1c
.RI "virtual void \fBwidgetLeaveEvent\fP (QEvent *)"
.br
.ti -1c
.RI "virtual void \fBstretchSelection\fP (const QSize &oldSize, const QSize &newSize)"
.br
.ti -1c
.RI "virtual \fBQwtPickerMachine\fP * \fBstateMachine\fP (int) const "
.br
.ti -1c
.RI "virtual void \fBupdateDisplay\fP ()"
.br
.ti -1c
.RI "const QWidget * \fBrubberBandWidget\fP () const"
.br
.ti -1c
.RI "const QWidget * \fBtrackerWidget\fP () const"
.br
.in -1c
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBQwtPicker::SelectionType\fP"
.PP
This enum type describes the type of a selection. It can be or'd with \fBQwtPicker::RectSelectionType\fP and \fBQwtPicker::SelectionMode\fP and passed to \fBQwtPicker::setSelectionFlags()\fP
.IP "\(bu" 2
NoSelection
.br
 Selection is disabled. Note this is different to the disabled state, as you might have a tracker.
.IP "\(bu" 2
PointSelection
.br
 Select a single point.
.IP "\(bu" 2
RectSelection
.br
 Select a rectangle.
.IP "\(bu" 2
PolygonSelection
.br
 Select a polygon.
.PP
.PP
The default value is NoSelection. 
.PP
\fBSee also:\fP
.RS 4
\fBQwtPicker::setSelectionFlags()\fP, \fBQwtPicker::selectionFlags()\fP 
.RE
.PP

.PP
Definition at line 117 of file qwt_picker.h.
.SS "enum \fBQwtPicker::RectSelectionType\fP"
.PP
Selection subtype for RectSelection This enum type describes the type of rectangle selections. It can be or'd with \fBQwtPicker::RectSelectionType\fP and \fBQwtPicker::SelectionMode\fP and passed to \fBQwtPicker::setSelectionFlags()\fP.
.IP "\(bu" 2
CornerToCorner
.br
 The first and the second selected point are the corners of the rectangle.
.IP "\(bu" 2
CenterToCorner
.br
 The first point is the center, the second a corner of the rectangle.
.IP "\(bu" 2
CenterToRadius
.br
 The first point is the center of a quadrat, calculated by the maximum of the x- and y-distance. 
.PP

.PP
The default value is CornerToCorner. 
.PP
\fBSee also:\fP
.RS 4
\fBQwtPicker::setSelectionFlags()\fP, \fBQwtPicker::selectionFlags()\fP 
.RE
.PP

.PP
Definition at line 143 of file qwt_picker.h.
.SS "enum \fBQwtPicker::SelectionMode\fP"
.PP
Values of this enum type or'd together with a SelectionType value identifies which state machine should be used for the selection.
.PP
The default value is ClickSelection. 
.PP
\fBSee also:\fP
.RS 4
\fBstateMachine()\fP 
.RE
.PP

.PP
Definition at line 157 of file qwt_picker.h.
.SS "enum \fBQwtPicker::RubberBand\fP"
.PP
Rubberband style
.IP "\(bu" 2
NoRubberBand
.br
 No rubberband.
.IP "\(bu" 2
HLineRubberBand & PointSelection
.br
 A horizontal line.
.IP "\(bu" 2
VLineRubberBand & PointSelection
.br
 A vertical line.
.IP "\(bu" 2
CrossRubberBand & PointSelection
.br
 A horizontal and a vertical line.
.IP "\(bu" 2
RectRubberBand & RectSelection
.br
 A rectangle.
.IP "\(bu" 2
EllipseRubberBand & RectSelection
.br
 An ellipse.
.IP "\(bu" 2
PolygonRubberBand &PolygonSelection
.br
 A polygon.
.IP "\(bu" 2
UserRubberBand
.br
 Values >= UserRubberBand can be used to define additional rubber bands.
.PP
.PP
The default value is NoRubberBand. 
.PP
\fBSee also:\fP
.RS 4
\fBQwtPicker::setRubberBand()\fP, \fBQwtPicker::rubberBand()\fP 
.RE
.PP

.PP
Definition at line 187 of file qwt_picker.h.
.SS "enum \fBQwtPicker::DisplayMode\fP"
.PP
.IP "\(bu" 2
AlwaysOff
.br
 Display never.
.IP "\(bu" 2
AlwaysOn
.br
 Display always.
.IP "\(bu" 2
ActiveOnly
.br
 Display only when the selection is active.
.PP
.PP
\fBSee also:\fP
.RS 4
\fBQwtPicker::setTrackerMode()\fP, \fBQwtPicker::trackerMode()\fP, \fBQwtPicker::isActive()\fP 
.RE
.PP

.PP
Definition at line 217 of file qwt_picker.h.
.SS "enum \fBQwtPicker::ResizeMode\fP"
.PP
Controls what to do with the selected points of an active selection when the observed widget is resized.
.IP "\(bu" 2
Stretch
.br
 All points are scaled according to the new size,
.IP "\(bu" 2
KeepSize
.br
 All points remain unchanged.
.PP
.PP
The default value is Stretch. 
.PP
\fBSee also:\fP
.RS 4
\fBQwtPicker::setResizeMode()\fP, QwtPicker::resize() 
.RE
.PP

.PP
Definition at line 236 of file qwt_picker.h.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "QwtPicker::QwtPicker (QWidget * parent)\fC [explicit]\fP"
.PP
Constructor
.PP
Creates an picker that is enabled, but where selection flag is set to NoSelection, rubberband and tracker are disabled.
.PP
\fBParameters:\fP
.RS 4
\fIparent\fP Parent widget, that will be observed 
.RE
.PP

.PP
Definition at line 247 of file qwt_picker.cpp.
.SS "QwtPicker::QwtPicker (int selectionFlags, \fBRubberBand\fP rubberBand, \fBDisplayMode\fP trackerMode, QWidget * parent)\fC [explicit]\fP"
.PP
Constructor
.PP
\fBParameters:\fP
.RS 4
\fIselectionFlags\fP Or'd value of SelectionType, RectSelectionType and SelectionMode 
.br
\fIrubberBand\fP Rubberband style 
.br
\fItrackerMode\fP Tracker mode 
.br
\fIparent\fP Parent widget, that will be observed 
.RE
.PP

.PP
Definition at line 262 of file qwt_picker.cpp.
.SS "QwtPicker::~QwtPicker ()\fC [virtual]\fP"
.PP
Destructor. 
.PP
Definition at line 270 of file qwt_picker.cpp.
.SH "Member Function Documentation"
.PP 
.SS "void QwtPicker::setSelectionFlags (int flags)\fC [virtual]\fP"
.PP
Set the selection flags
.PP
\fBParameters:\fP
.RS 4
\fIflags\fP Or'd value of SelectionType, RectSelectionType and SelectionMode. The default value is NoSelection.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBselectionFlags()\fP, \fBSelectionType\fP, \fBRectSelectionType\fP, \fBSelectionMode\fP 
.RE
.PP

.PP
Reimplemented in \fBQwtPlotZoomer\fP.
.PP
Definition at line 401 of file qwt_picker.cpp.
.PP
References stateMachine().
.PP
Referenced by QwtPlotZoomer::setSelectionFlags().
.SS "int QwtPicker::selectionFlags () const"
.PP
\fBReturns:\fP
.RS 4
Selection flags, an Or'd value of SelectionType, RectSelectionType and SelectionMode. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBsetSelectionFlags()\fP, \fBSelectionType\fP, \fBRectSelectionType\fP, \fBSelectionMode\fP 
.RE
.PP

.PP
Definition at line 412 of file qwt_picker.cpp.
.PP
Referenced by drawRubberBand(), and QwtPlotPicker::end().
.SS "void QwtPicker::setRubberBand (\fBRubberBand\fP rubberBand)\fC [virtual]\fP"
.PP
Set the rubberband style
.PP
\fBParameters:\fP
.RS 4
\fIrubberBand\fP Rubberband style The default value is NoRubberBand.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBrubberBand()\fP, \fBRubberBand\fP, \fBsetRubberBandPen()\fP 
.RE
.PP

.PP
Definition at line 425 of file qwt_picker.cpp.
.SS "\fBQwtPicker::RubberBand\fP QwtPicker::rubberBand () const"
.PP
\fBReturns:\fP
.RS 4
Rubberband style 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBsetRubberBand()\fP, \fBRubberBand\fP, \fBrubberBandPen()\fP 
.RE
.PP

.PP
Definition at line 434 of file qwt_picker.cpp.
.PP
Referenced by drawRubberBand(), trackerRect(), QwtPlotPicker::trackerText(), trackerText(), and updateDisplay().
.SS "void QwtPicker::setTrackerMode (\fBDisplayMode\fP mode)\fC [virtual]\fP"
.PP
Set the display mode of the tracker. 
.PP
A tracker displays information about current position of the cursor as a string. The display mode controls if the tracker has to be displayed whenever the observed widget has focus and cursor (AlwaysOn), never (AlwaysOff), or only when the selection is active (ActiveOnly).
.PP
\fBParameters:\fP
.RS 4
\fImode\fP Tracker display mode
.RE
.PP
\fBWarning:\fP
.RS 4
In case of AlwaysOn, mouseTracking will be enabled for the observed widget. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBtrackerMode()\fP, \fBDisplayMode\fP 
.RE
.PP

.PP
Definition at line 455 of file qwt_picker.cpp.
.SS "\fBQwtPicker::DisplayMode\fP QwtPicker::trackerMode () const"
.PP
\fBReturns:\fP
.RS 4
Tracker display mode 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBsetTrackerMode()\fP, \fBDisplayMode\fP 
.RE
.PP

.PP
Definition at line 468 of file qwt_picker.cpp.
.PP
Referenced by begin(), end(), trackerRect(), and updateDisplay().
.SS "void QwtPicker::setResizeMode (\fBResizeMode\fP mode)\fC [virtual]\fP"
.PP
Set the resize mode. 
.PP
The resize mode controls what to do with the selected points of an active selection when the observed widget is resized.
.PP
Stretch means the points are scaled according to the new size, KeepSize means the points remain unchanged.
.PP
The default mode is Stretch.
.PP
\fBParameters:\fP
.RS 4
\fImode\fP Resize mode 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBresizeMode()\fP, \fBResizeMode\fP 
.RE
.PP

.PP
Definition at line 487 of file qwt_picker.cpp.
.SS "\fBQwtPicker::ResizeMode\fP QwtPicker::resizeMode () const"
.PP
\fBReturns:\fP
.RS 4
Resize mode 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBsetResizeMode()\fP, \fBResizeMode\fP 
.RE
.PP

.PP
Definition at line 497 of file qwt_picker.cpp.
.SS "void QwtPicker::setRubberBandPen (const QPen & pen)\fC [virtual]\fP"
.PP
Set the pen for the rubberband
.PP
\fBParameters:\fP
.RS 4
\fIpen\fP Rubberband pen 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBrubberBandPen()\fP, \fBsetRubberBand()\fP 
.RE
.PP

.PP
Definition at line 595 of file qwt_picker.cpp.
.PP
References updateDisplay().
.SS "QPen QwtPicker::rubberBandPen () const"
.PP
\fBReturns:\fP
.RS 4
Rubberband pen 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBsetRubberBandPen()\fP, \fBrubberBand()\fP 
.RE
.PP

.PP
Definition at line 608 of file qwt_picker.cpp.
.PP
Referenced by drawRubberBand(), and updateDisplay().
.SS "void QwtPicker::setTrackerPen (const QPen & pen)\fC [virtual]\fP"
.PP
Set the pen for the tracker
.PP
\fBParameters:\fP
.RS 4
\fIpen\fP Tracker pen 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBtrackerPen()\fP, \fBsetTrackerMode()\fP, \fBsetTrackerFont()\fP 
.RE
.PP

.PP
Definition at line 571 of file qwt_picker.cpp.
.PP
References updateDisplay().
.SS "QPen QwtPicker::trackerPen () const"
.PP
\fBReturns:\fP
.RS 4
Tracker pen 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBsetTrackerPen()\fP, \fBtrackerMode()\fP, \fBtrackerFont()\fP 
.RE
.PP

.PP
Definition at line 584 of file qwt_picker.cpp.
.PP
Referenced by updateDisplay().
.SS "void QwtPicker::setTrackerFont (const QFont & font)\fC [virtual]\fP"
.PP
Set the font for the tracker
.PP
\fBParameters:\fP
.RS 4
\fIfont\fP Tracker font 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBtrackerFont()\fP, \fBsetTrackerMode()\fP, \fBsetTrackerPen()\fP 
.RE
.PP

.PP
Definition at line 546 of file qwt_picker.cpp.
.PP
References updateDisplay().
.SS "QFont QwtPicker::trackerFont () const"
.PP
\fBReturns:\fP
.RS 4
Tracker font 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBsetTrackerFont()\fP, \fBtrackerMode()\fP, \fBtrackerPen()\fP 
.RE
.PP

.PP
Definition at line 560 of file qwt_picker.cpp.
.SS "bool QwtPicker::isEnabled () const"
.PP
\fBReturns:\fP
.RS 4
true when enabled, false otherwise 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBsetEnabled\fP, \fBeventFilter()\fP 
.RE
.PP

.PP
Definition at line 535 of file qwt_picker.cpp.
.SS "void QwtPicker::setEnabled (bool enabled)\fC [virtual]\fP"
.PP
En/disable the picker. 
.PP
When enabled is true an event filter is installed for the observed widget, otherwise the event filter is removed.
.PP
\fBParameters:\fP
.RS 4
\fIenabled\fP true or false 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBisEnabled()\fP, \fBeventFilter()\fP 
.RE
.PP

.PP
Definition at line 511 of file qwt_picker.cpp.
.PP
References parentWidget(), and updateDisplay().
.SS "bool QwtPicker::isActive () const"
.PP
A picker is active between \fBbegin()\fP and \fBend()\fP. 
.PP
\fBReturns:\fP
.RS 4
true if the selection is active. 
.RE
.PP

.PP
Definition at line 1263 of file qwt_picker.cpp.
.PP
Referenced by drawRubberBand(), reset(), trackerRect(), updateDisplay(), QwtPlotZoomer::widgetKeyPressEvent(), widgetLeaveEvent(), and widgetMouseMoveEvent().
.SS "bool QwtPicker::eventFilter (QObject * o, QEvent * e)\fC [virtual]\fP"
.PP
Event filter. 
.PP
When \fBisEnabled()\fP == true all events of the observed widget are filtered. Mouse and keyboard events are translated into widgetMouse- and widgetKey- and widgetWheel-events. Paint and Resize events are handled to keep rubberband and tracker up to date.
.PP
\fBSee also:\fP
.RS 4
event(), \fBwidgetMousePressEvent()\fP, \fBwidgetMouseReleaseEvent()\fP, \fBwidgetMouseDoubleClickEvent()\fP, \fBwidgetMouseMoveEvent()\fP, \fBwidgetWheelEvent()\fP, \fBwidgetKeyPressEvent()\fP, \fBwidgetKeyReleaseEvent()\fP 
.RE
.PP

.PP
Definition at line 850 of file qwt_picker.cpp.
.PP
References parentWidget(), stretchSelection(), widgetKeyPressEvent(), widgetKeyReleaseEvent(), widgetLeaveEvent(), widgetMouseDoubleClickEvent(), widgetMouseMoveEvent(), widgetMousePressEvent(), widgetMouseReleaseEvent(), and widgetWheelEvent().
.SS "QWidget * QwtPicker::parentWidget ()"
.PP
Return the parent widget, where the selection happens. 
.PP
Definition at line 373 of file qwt_picker.cpp.
.PP
Referenced by begin(), QwtPlotPicker::canvas(), eventFilter(), pickRect(), setEnabled(), transition(), updateDisplay(), and widgetKeyPressEvent().
.SS "const QWidget * QwtPicker::parentWidget () const"
.PP
Return the parent widget, where the selection happens. 
.PP
Definition at line 383 of file qwt_picker.cpp.
.SS "QRect QwtPicker::pickRect () const\fC [virtual]\fP"
.PP
Find the area of the observed widget, where selection might happen.
.PP
\fBReturns:\fP
.RS 4
QFrame::contentsRect() if it is a QFrame, QWidget::rect() otherwise. 
.RE
.PP

.PP
Definition at line 1342 of file qwt_picker.cpp.
.PP
References parentWidget().
.PP
Referenced by drawRubberBand(), trackerRect(), widgetKeyPressEvent(), widgetMouseMoveEvent(), and widgetWheelEvent().
.SS "const QwtPolygon & QwtPicker::selection () const"
.PP
Return Selected points. 
.PP
Definition at line 1269 of file qwt_picker.cpp.
.PP
Referenced by QwtPlotZoomer::end(), and QwtPlotPicker::end().
.SS "void QwtPicker::drawRubberBand (QPainter * painter) const\fC [virtual]\fP"
.PP
Draw a rubberband , depending on \fBrubberBand()\fP and \fBselectionFlags()\fP
.PP
\fBParameters:\fP
.RS 4
\fIpainter\fP Painter, initialized with clip rect
.RE
.PP
\fBSee also:\fP
.RS 4
\fBrubberBand()\fP, \fBRubberBand\fP, \fBselectionFlags()\fP 
.RE
.PP

.PP
Definition at line 652 of file qwt_picker.cpp.
.PP
References QwtPainter::drawEllipse(), QwtPainter::drawLine(), QwtPainter::drawRect(), isActive(), pickRect(), rubberBand(), rubberBandPen(), and selectionFlags().
.SS "void QwtPicker::drawTracker (QPainter * painter) const\fC [virtual]\fP"
.PP
Draw the tracker
.PP
\fBParameters:\fP
.RS 4
\fIpainter\fP Painter 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBtrackerRect()\fP, \fBtrackerText()\fP 
.RE
.PP

.PP
Definition at line 747 of file qwt_picker.cpp.
.PP
References QwtText::draw(), QwtText::isEmpty(), QwtText::setFont(), trackerRect(), trackerText(), and QwtText::usedFont().
.SS "\fBQwtText\fP QwtPicker::trackerText (const QPoint & pos) const\fC [virtual]\fP"
.PP
Return the label for a position. 
.PP
In case of HLineRubberBand the label is the value of the y position, in case of VLineRubberBand the value of the x position. Otherwise the label contains x and y position separated by a ',' .
.PP
The format for the string conversion is '%d'.
.PP
\fBParameters:\fP
.RS 4
\fIpos\fP Position 
.RE
.PP
\fBReturns:\fP
.RS 4
Converted position as string 
.RE
.PP

.PP
Reimplemented in \fBQwtPlotPicker\fP.
.PP
Definition at line 626 of file qwt_picker.cpp.
.PP
References rubberBand().
.PP
Referenced by drawTracker(), and trackerRect().
.SS "void QwtPicker::selected (const QwtPolygon & pa)\fC [signal]\fP"
.PP
A signal emitting the selected points, at the end of a selection.
.PP
\fBParameters:\fP
.RS 4
\fIpa\fP Selected points 
.RE
.PP

.PP
Referenced by end().
.SS "void QwtPicker::appended (const QPoint & pos)\fC [signal]\fP"
.PP
A signal emitted when a point has been appended to the selection
.PP
\fBParameters:\fP
.RS 4
\fIpos\fP Position of the appended point. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBappend()\fP. \fBmoved()\fP 
.RE
.PP

.PP
Referenced by append().
.SS "void QwtPicker::moved (const QPoint & pos)\fC [signal]\fP"
.PP
A signal emitted whenever the last appended point of the selection has been moved.
.PP
\fBParameters:\fP
.RS 4
\fIpos\fP Position of the moved last point of the selection. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBmove()\fP, \fBappended()\fP 
.RE
.PP

.PP
Referenced by move().
.SS "void QwtPicker::changed (const QwtPolygon & pa)\fC [signal]\fP"
.PP
A signal emitted when the active selection has been changed. This might happen when the observed widget is resized.
.PP
\fBParameters:\fP
.RS 4
\fIpa\fP Changed selection 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBstretchSelection()\fP 
.RE
.PP

.PP
Referenced by stretchSelection().
.SS "bool QwtPicker::accept (QwtPolygon & selection) const\fC [protected, virtual]\fP"
.PP
Validate and fixup the selection. 
.PP
Accepts all selections unmodified
.PP
\fBParameters:\fP
.RS 4
\fIselection\fP Selection to validate and fixup 
.RE
.PP
\fBReturns:\fP
.RS 4
true, when accepted, false otherwise 
.RE
.PP

.PP
Reimplemented in \fBQwtPlotZoomer\fP.
.PP
Definition at line 1254 of file qwt_picker.cpp.
.PP
Referenced by end().
.SS "void QwtPicker::transition (const QEvent * e)\fC [protected, virtual]\fP"
.PP
Passes an event to the state machine and executes the resulting commands. Append and Move commands use the current position of the cursor (QCursor::pos()).
.PP
\fBParameters:\fP
.RS 4
\fIe\fP Event 
.RE
.PP

.PP
Definition at line 1077 of file qwt_picker.cpp.
.PP
References append(), begin(), end(), move(), and parentWidget().
.PP
Referenced by widgetKeyPressEvent(), widgetKeyReleaseEvent(), widgetMouseDoubleClickEvent(), widgetMouseMoveEvent(), widgetMousePressEvent(), widgetMouseReleaseEvent(), and widgetWheelEvent().
.SS "void QwtPicker::begin ()\fC [protected, virtual]\fP"
.PP
Open a selection setting the state to active
.PP
\fBSee also:\fP
.RS 4
\fBisActive\fP, \fBend()\fP, \fBappend()\fP, \fBmove()\fP 
.RE
.PP

.PP
Reimplemented in \fBQwtPlotZoomer\fP.
.PP
Definition at line 1134 of file qwt_picker.cpp.
.PP
References parentWidget(), trackerMode(), and updateDisplay().
.PP
Referenced by QwtPlotZoomer::begin(), and transition().
.SS "void QwtPicker::append (const QPoint & pos)\fC [protected, virtual]\fP"
.PP
Append a point to the selection and update rubberband and tracker. The \fBappended()\fP signal is emitted.
.PP
\fBParameters:\fP
.RS 4
\fIpos\fP Additional point
.RE
.PP
\fBSee also:\fP
.RS 4
\fBisActive\fP, \fBbegin()\fP, \fBend()\fP, \fBmove()\fP, \fBappended()\fP 
.RE
.PP

.PP
Reimplemented in \fBQwtPlotPicker\fP.
.PP
Definition at line 1213 of file qwt_picker.cpp.
.PP
References appended(), and updateDisplay().
.PP
Referenced by QwtPlotPicker::append(), and transition().
.SS "void QwtPicker::move (const QPoint & pos)\fC [protected, virtual]\fP"
.PP
Move the last point of the selection The \fBmoved()\fP signal is emitted.
.PP
\fBParameters:\fP
.RS 4
\fIpos\fP New position 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBisActive\fP, \fBbegin()\fP, \fBend()\fP, \fBappend()\fP 
.RE
.PP

.PP
Reimplemented in \fBQwtPlotPicker\fP.
.PP
Definition at line 1235 of file qwt_picker.cpp.
.PP
References moved(), and updateDisplay().
.PP
Referenced by QwtPlotPicker::move(), and transition().
.SS "bool QwtPicker::end (bool ok = \fCtrue\fP)\fC [protected, virtual]\fP"
.PP
Close a selection setting the state to inactive. 
.PP
The selection is validated and maybe fixed by \fBQwtPicker::accept()\fP.
.PP
\fBParameters:\fP
.RS 4
\fIok\fP If true, complete the selection and emit a selected signal otherwise discard the selection. 
.RE
.PP
\fBReturns:\fP
.RS 4
true if the selection is accepted, false otherwise 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBisActive\fP, \fBbegin()\fP, \fBappend()\fP, \fBmove()\fP, \fBselected()\fP, \fBaccept()\fP 
.RE
.PP

.PP
Reimplemented in \fBQwtPlotPicker\fP, and \fBQwtPlotZoomer\fP.
.PP
Definition at line 1166 of file qwt_picker.cpp.
.PP
References accept(), selected(), trackerMode(), and updateDisplay().
.PP
Referenced by QwtPlotPicker::end(), reset(), and transition().
.SS "void QwtPicker::reset ()\fC [protected, virtual]\fP"
.PP
Reset the state machine and terminate (end(false)) the selection 
.PP
Definition at line 1196 of file qwt_picker.cpp.
.PP
References end(), and isActive().
.PP
Referenced by widgetKeyPressEvent().
.SS "void QwtPicker::widgetMousePressEvent (QMouseEvent * e)\fC [protected, virtual]\fP"
.PP
Handle a mouse press event for the observed widget.
.PP
Begin and/or end a selection depending on the selection flags.
.PP
\fBSee also:\fP
.RS 4
\fBQwtPicker\fP, \fBselectionFlags()\fP 
.PP
\fBeventFilter()\fP, \fBwidgetMouseReleaseEvent()\fP, \fBwidgetMouseDoubleClickEvent()\fP, \fBwidgetMouseMoveEvent()\fP, \fBwidgetWheelEvent()\fP, \fBwidgetKeyPressEvent()\fP, \fBwidgetKeyReleaseEvent()\fP 
.RE
.PP

.PP
Definition at line 910 of file qwt_picker.cpp.
.PP
References transition().
.PP
Referenced by eventFilter().
.SS "void QwtPicker::widgetMouseReleaseEvent (QMouseEvent * e)\fC [protected, virtual]\fP"
.PP
Handle a mouse relase event for the observed widget.
.PP
End a selection depending on the selection flags.
.PP
\fBSee also:\fP
.RS 4
\fBQwtPicker\fP, \fBselectionFlags()\fP 
.PP
\fBeventFilter()\fP, \fBwidgetMousePressEvent()\fP, \fBwidgetMouseDoubleClickEvent()\fP, \fBwidgetMouseMoveEvent()\fP, \fBwidgetWheelEvent()\fP, \fBwidgetKeyPressEvent()\fP, \fBwidgetKeyReleaseEvent()\fP 
.RE
.PP

.PP
Reimplemented in \fBQwtPlotZoomer\fP.
.PP
Definition at line 961 of file qwt_picker.cpp.
.PP
References transition().
.PP
Referenced by eventFilter(), and QwtPlotZoomer::widgetMouseReleaseEvent().
.SS "void QwtPicker::widgetMouseDoubleClickEvent (QMouseEvent * me)\fC [protected, virtual]\fP"
.PP
Handle mouse double click event for the observed widget.
.PP
Empty implementation, does nothing.
.PP
\fBSee also:\fP
.RS 4
\fBeventFilter()\fP, \fBwidgetMousePressEvent()\fP, \fBwidgetMouseReleaseEvent()\fP, \fBwidgetMouseMoveEvent()\fP, \fBwidgetWheelEvent()\fP, \fBwidgetKeyPressEvent()\fP, \fBwidgetKeyReleaseEvent()\fP 
.RE
.PP

.PP
Definition at line 975 of file qwt_picker.cpp.
.PP
References transition().
.PP
Referenced by eventFilter().
.SS "void QwtPicker::widgetMouseMoveEvent (QMouseEvent * e)\fC [protected, virtual]\fP"
.PP
Handle a mouse move event for the observed widget.
.PP
Move the last point of the selection in case of \fBisActive()\fP == true
.PP
\fBSee also:\fP
.RS 4
\fBeventFilter()\fP, \fBwidgetMousePressEvent()\fP, \fBwidgetMouseReleaseEvent()\fP, \fBwidgetMouseDoubleClickEvent()\fP, \fBwidgetWheelEvent()\fP, \fBwidgetKeyPressEvent()\fP, \fBwidgetKeyReleaseEvent()\fP 
.RE
.PP

.PP
Definition at line 924 of file qwt_picker.cpp.
.PP
References isActive(), pickRect(), transition(), and updateDisplay().
.PP
Referenced by eventFilter().
.SS "void QwtPicker::widgetWheelEvent (QWheelEvent * e)\fC [protected, virtual]\fP"
.PP
Handle a wheel event for the observed widget.
.PP
Move the last point of the selection in case of \fBisActive()\fP == true
.PP
\fBSee also:\fP
.RS 4
\fBeventFilter()\fP, \fBwidgetMousePressEvent()\fP, \fBwidgetMouseReleaseEvent()\fP, \fBwidgetMouseDoubleClickEvent()\fP, \fBwidgetMouseMoveEvent()\fP, \fBwidgetKeyPressEvent()\fP, \fBwidgetKeyReleaseEvent()\fP 
.RE
.PP

.PP
Definition at line 990 of file qwt_picker.cpp.
.PP
References pickRect(), transition(), and updateDisplay().
.PP
Referenced by eventFilter().
.SS "void QwtPicker::widgetKeyPressEvent (QKeyEvent * ke)\fC [protected, virtual]\fP"
.PP
Handle a key press event for the observed widget.
.PP
Selections can be completely done by the keyboard. The arrow keys move the cursor, the abort key aborts a selection. All other keys are handled by the current state machine.
.PP
\fBSee also:\fP
.RS 4
\fBQwtPicker\fP, \fBselectionFlags()\fP 
.PP
\fBeventFilter()\fP, \fBwidgetMousePressEvent()\fP, \fBwidgetMouseReleaseEvent()\fP, \fBwidgetMouseDoubleClickEvent()\fP, \fBwidgetMouseMoveEvent()\fP, \fBwidgetWheelEvent()\fP, \fBwidgetKeyReleaseEvent()\fP, \fBstateMachine()\fP, \fBQwtEventPattern::KeyPatternCode\fP 
.RE
.PP

.PP
Reimplemented in \fBQwtPlotZoomer\fP.
.PP
Definition at line 1015 of file qwt_picker.cpp.
.PP
References QwtEventPattern::keyMatch(), parentWidget(), pickRect(), reset(), and transition().
.PP
Referenced by eventFilter(), and QwtPlotZoomer::widgetKeyPressEvent().
.SS "void QwtPicker::widgetKeyReleaseEvent (QKeyEvent * ke)\fC [protected, virtual]\fP"
.PP
Handle a key release event for the observed widget.
.PP
Passes the event to the state machine.
.PP
\fBSee also:\fP
.RS 4
\fBeventFilter()\fP, \fBwidgetMousePressEvent()\fP, \fBwidgetMouseReleaseEvent()\fP, \fBwidgetMouseDoubleClickEvent()\fP, \fBwidgetMouseMoveEvent()\fP, \fBwidgetWheelEvent()\fP, \fBwidgetKeyPressEvent()\fP, \fBstateMachine()\fP 
.RE
.PP

.PP
Definition at line 1065 of file qwt_picker.cpp.
.PP
References transition().
.PP
Referenced by eventFilter().
.SS "void QwtPicker::widgetLeaveEvent (QEvent *)\fC [protected, virtual]\fP"
.PP
Handle a leave event for the observed widget.
.PP
\fBSee also:\fP
.RS 4
\fBeventFilter()\fP, \fBwidgetMousePressEvent()\fP, \fBwidgetMouseReleaseEvent()\fP, \fBwidgetMouseDoubleClickEvent()\fP, \fBwidgetWheelEvent()\fP, \fBwidgetKeyPressEvent()\fP, \fBwidgetKeyReleaseEvent()\fP 
.RE
.PP

.PP
Definition at line 944 of file qwt_picker.cpp.
.PP
References isActive(), and updateDisplay().
.PP
Referenced by eventFilter().
.SS "void QwtPicker::stretchSelection (const QSize & oldSize, const QSize & newSize)\fC [protected, virtual]\fP"
.PP
Scale the selection by the ratios of oldSize and newSize The \fBchanged()\fP signal is emitted.
.PP
\fBParameters:\fP
.RS 4
\fIoldSize\fP Previous size 
.br
\fInewSize\fP Current size
.RE
.PP
\fBSee also:\fP
.RS 4
\fBResizeMode\fP, \fBsetResizeMode()\fP, \fBresizeMode()\fP 
.RE
.PP

.PP
Definition at line 1283 of file qwt_picker.cpp.
.PP
References changed().
.PP
Referenced by eventFilter().
.SS "\fBQwtPickerMachine\fP * QwtPicker::stateMachine (int flags) const\fC [protected, virtual]\fP"
.PP
Create a state machine depending on the selection flags.
.PP
.IP "\(bu" 2
PointSelection | ClickSelection
.br
 QwtPickerClickPointMachine()
.IP "\(bu" 2
PointSelection | DragSelection
.br
 QwtPickerDragPointMachine()
.IP "\(bu" 2
RectSelection | ClickSelection
.br
 QwtPickerClickRectMachine()
.IP "\(bu" 2
RectSelection | DragSelection
.br
 QwtPickerDragRectMachine()
.IP "\(bu" 2
PolygonSelection
.br
 QwtPickerPolygonMachine()
.PP
.PP
\fBSee also:\fP
.RS 4
\fBsetSelectionFlags()\fP 
.RE
.PP

.PP
Definition at line 349 of file qwt_picker.cpp.
.PP
Referenced by setSelectionFlags().

.SH "Author"
.PP 
Generated automatically by Doxygen for Qwt User's Guide from the source code.
